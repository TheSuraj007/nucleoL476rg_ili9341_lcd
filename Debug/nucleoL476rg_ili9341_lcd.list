
nucleoL476rg_ili9341_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080050bc  080050bc  000150bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005104  08005104  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005104  08005104  00015104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800510c  0800510c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005110  08005110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000010  08005124  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08005124  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e580  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002494  00000000  00000000  0002e603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  00030a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b7  00000000  00000000  00031740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002500e  00000000  00000000  000320f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000106eb  00000000  00000000  00057105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e67e6  00000000  00000000  000677f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032d4  00000000  00000000  0014dfd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001512ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080050a4 	.word	0x080050a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080050a4 	.word	0x080050a4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	; 0x28
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	4b3f      	ldr	r3, [pc, #252]	; (80005d8 <MX_GPIO_Init+0x114>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a3e      	ldr	r2, [pc, #248]	; (80005d8 <MX_GPIO_Init+0x114>)
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b3c      	ldr	r3, [pc, #240]	; (80005d8 <MX_GPIO_Init+0x114>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0304 	and.w	r3, r3, #4
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f2:	4b39      	ldr	r3, [pc, #228]	; (80005d8 <MX_GPIO_Init+0x114>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a38      	ldr	r2, [pc, #224]	; (80005d8 <MX_GPIO_Init+0x114>)
 80004f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b36      	ldr	r3, [pc, #216]	; (80005d8 <MX_GPIO_Init+0x114>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	4b33      	ldr	r3, [pc, #204]	; (80005d8 <MX_GPIO_Init+0x114>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	4a32      	ldr	r2, [pc, #200]	; (80005d8 <MX_GPIO_Init+0x114>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000516:	4b30      	ldr	r3, [pc, #192]	; (80005d8 <MX_GPIO_Init+0x114>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	4b2d      	ldr	r3, [pc, #180]	; (80005d8 <MX_GPIO_Init+0x114>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	4a2c      	ldr	r2, [pc, #176]	; (80005d8 <MX_GPIO_Init+0x114>)
 8000528:	f043 0302 	orr.w	r3, r3, #2
 800052c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052e:	4b2a      	ldr	r3, [pc, #168]	; (80005d8 <MX_GPIO_Init+0x114>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	f003 0302 	and.w	r3, r3, #2
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	4827      	ldr	r0, [pc, #156]	; (80005dc <MX_GPIO_Init+0x118>)
 8000540:	f001 ff90 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 7100 	mov.w	r1, #512	; 0x200
 800054a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054e:	f001 ff89 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2140      	movs	r1, #64	; 0x40
 8000556:	4822      	ldr	r0, [pc, #136]	; (80005e0 <MX_GPIO_Init+0x11c>)
 8000558:	f001 ff84 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800055c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000562:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	4619      	mov	r1, r3
 8000572:	481a      	ldr	r0, [pc, #104]	; (80005dc <MX_GPIO_Init+0x118>)
 8000574:	f001 fdcc 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057c:	2301      	movs	r3, #1
 800057e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000580:	2301      	movs	r3, #1
 8000582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2300      	movs	r3, #0
 8000586:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4619      	mov	r1, r3
 800058e:	4813      	ldr	r0, [pc, #76]	; (80005dc <MX_GPIO_Init+0x118>)
 8000590:	f001 fdbe 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	2301      	movs	r3, #1
 800059c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800059e:	2301      	movs	r3, #1
 80005a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2300      	movs	r3, #0
 80005a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4619      	mov	r1, r3
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b0:	f001 fdae 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80005b4:	2340      	movs	r3, #64	; 0x40
 80005b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005bc:	2301      	movs	r3, #1
 80005be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c0:	2300      	movs	r3, #0
 80005c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4619      	mov	r1, r3
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <MX_GPIO_Init+0x11c>)
 80005cc:	f001 fda0 	bl	8002110 <HAL_GPIO_Init>

}
 80005d0:	bf00      	nop
 80005d2:	3728      	adds	r7, #40	; 0x28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021000 	.word	0x40021000
 80005dc:	48000800 	.word	0x48000800
 80005e0:	48000400 	.word	0x48000400

080005e4 <drawRoundRect>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void drawRoundRect(int16_t x, int16_t y, int16_t w,int16_t h, int16_t r, uint16_t color)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b087      	sub	sp, #28
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	4604      	mov	r4, r0
 80005ec:	4608      	mov	r0, r1
 80005ee:	4611      	mov	r1, r2
 80005f0:	461a      	mov	r2, r3
 80005f2:	4623      	mov	r3, r4
 80005f4:	80fb      	strh	r3, [r7, #6]
 80005f6:	4603      	mov	r3, r0
 80005f8:	80bb      	strh	r3, [r7, #4]
 80005fa:	460b      	mov	r3, r1
 80005fc:	807b      	strh	r3, [r7, #2]
 80005fe:	4613      	mov	r3, r2
 8000600:	803b      	strh	r3, [r7, #0]
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8000602:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000606:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800060a:	4293      	cmp	r3, r2
 800060c:	bfa8      	it	ge
 800060e:	4613      	movge	r3, r2
 8000610:	b21b      	sxth	r3, r3
 8000612:	0fda      	lsrs	r2, r3, #31
 8000614:	4413      	add	r3, r2
 8000616:	105b      	asrs	r3, r3, #1
 8000618:	81fb      	strh	r3, [r7, #14]
  if (r > max_radius)
 800061a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800061e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000622:	429a      	cmp	r2, r3
 8000624:	dd01      	ble.n	800062a <drawRoundRect+0x46>
    r = max_radius;
 8000626:	89fb      	ldrh	r3, [r7, #14]
 8000628:	843b      	strh	r3, [r7, #32]
  // smarter version
  writeFastHLine(x + r, y, w - 2 * r, color);         // Top
 800062a:	88fa      	ldrh	r2, [r7, #6]
 800062c:	8c3b      	ldrh	r3, [r7, #32]
 800062e:	4413      	add	r3, r2
 8000630:	b29b      	uxth	r3, r3
 8000632:	b218      	sxth	r0, r3
 8000634:	887a      	ldrh	r2, [r7, #2]
 8000636:	8c3b      	ldrh	r3, [r7, #32]
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	b29b      	uxth	r3, r3
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	b29b      	uxth	r3, r3
 8000640:	b21a      	sxth	r2, r3
 8000642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000644:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000648:	f000 ff7c 	bl	8001544 <writeFastHLine>
  writeFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 800064c:	88fa      	ldrh	r2, [r7, #6]
 800064e:	8c3b      	ldrh	r3, [r7, #32]
 8000650:	4413      	add	r3, r2
 8000652:	b29b      	uxth	r3, r3
 8000654:	b218      	sxth	r0, r3
 8000656:	88ba      	ldrh	r2, [r7, #4]
 8000658:	883b      	ldrh	r3, [r7, #0]
 800065a:	4413      	add	r3, r2
 800065c:	b29b      	uxth	r3, r3
 800065e:	3b01      	subs	r3, #1
 8000660:	b29b      	uxth	r3, r3
 8000662:	b219      	sxth	r1, r3
 8000664:	887a      	ldrh	r2, [r7, #2]
 8000666:	8c3b      	ldrh	r3, [r7, #32]
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	b29b      	uxth	r3, r3
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	b29b      	uxth	r3, r3
 8000670:	b21a      	sxth	r2, r3
 8000672:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000674:	f000 ff66 	bl	8001544 <writeFastHLine>
  writeFastVLine(x, y + r, h - 2 * r, color);         // Left
 8000678:	88ba      	ldrh	r2, [r7, #4]
 800067a:	8c3b      	ldrh	r3, [r7, #32]
 800067c:	4413      	add	r3, r2
 800067e:	b29b      	uxth	r3, r3
 8000680:	b219      	sxth	r1, r3
 8000682:	883a      	ldrh	r2, [r7, #0]
 8000684:	8c3b      	ldrh	r3, [r7, #32]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	b29b      	uxth	r3, r3
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	b29b      	uxth	r3, r3
 800068e:	b21a      	sxth	r2, r3
 8000690:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000692:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000696:	f000 ff81 	bl	800159c <writeFastVLine>
  writeFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 800069a:	88fa      	ldrh	r2, [r7, #6]
 800069c:	887b      	ldrh	r3, [r7, #2]
 800069e:	4413      	add	r3, r2
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	3b01      	subs	r3, #1
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	b218      	sxth	r0, r3
 80006a8:	88ba      	ldrh	r2, [r7, #4]
 80006aa:	8c3b      	ldrh	r3, [r7, #32]
 80006ac:	4413      	add	r3, r2
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	b219      	sxth	r1, r3
 80006b2:	883a      	ldrh	r2, [r7, #0]
 80006b4:	8c3b      	ldrh	r3, [r7, #32]
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	b29b      	uxth	r3, r3
 80006be:	b21a      	sxth	r2, r3
 80006c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006c2:	f000 ff6b 	bl	800159c <writeFastVLine>
  // draw four corners
  drawEllipseHelper(x + r, y + r, r, r, 1, color);
 80006c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80006ce:	18d0      	adds	r0, r2, r3
 80006d0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80006d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80006d8:	18d1      	adds	r1, r2, r3
 80006da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80006de:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 80006e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	2301      	movs	r3, #1
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	4623      	mov	r3, r4
 80006ec:	f000 fcb2 	bl	8001054 <drawEllipseHelper>
  drawEllipseHelper(x + w - r - 1, y + r, r, r, 2, color);
 80006f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006f8:	441a      	add	r2, r3
 80006fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	1e58      	subs	r0, r3, #1
 8000702:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000706:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800070a:	18d1      	adds	r1, r2, r3
 800070c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000710:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8000714:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	2302      	movs	r3, #2
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	4623      	mov	r3, r4
 800071e:	f000 fc99 	bl	8001054 <drawEllipseHelper>
  drawEllipseHelper(x + w - r - 1, y + h - r - 1, r, r, 4, color);
 8000722:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000726:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800072a:	441a      	add	r2, r3
 800072c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	1e58      	subs	r0, r3, #1
 8000734:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000738:	f9b7 3000 	ldrsh.w	r3, [r7]
 800073c:	441a      	add	r2, r3
 800073e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	1e59      	subs	r1, r3, #1
 8000746:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800074a:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800074e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	2304      	movs	r3, #4
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	4623      	mov	r3, r4
 8000758:	f000 fc7c 	bl	8001054 <drawEllipseHelper>
  drawEllipseHelper(x + r, y + h - r - 1, r, r, 8, color);
 800075c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000760:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000764:	18d0      	adds	r0, r2, r3
 8000766:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800076a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800076e:	441a      	add	r2, r3
 8000770:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	1e59      	subs	r1, r3, #1
 8000778:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800077c:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8000780:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000782:	9301      	str	r3, [sp, #4]
 8000784:	2308      	movs	r3, #8
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	4623      	mov	r3, r4
 800078a:	f000 fc63 	bl	8001054 <drawEllipseHelper>
}
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	bd90      	pop	{r4, r7, pc}

08000796 <fillRoundRect>:


void fillRoundRect(int16_t x, int16_t y, int16_t w,int16_t h, int16_t r, uint16_t color)
{
 8000796:	b5b0      	push	{r4, r5, r7, lr}
 8000798:	b088      	sub	sp, #32
 800079a:	af04      	add	r7, sp, #16
 800079c:	4604      	mov	r4, r0
 800079e:	4608      	mov	r0, r1
 80007a0:	4611      	mov	r1, r2
 80007a2:	461a      	mov	r2, r3
 80007a4:	4623      	mov	r3, r4
 80007a6:	80fb      	strh	r3, [r7, #6]
 80007a8:	4603      	mov	r3, r0
 80007aa:	80bb      	strh	r3, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	807b      	strh	r3, [r7, #2]
 80007b0:	4613      	mov	r3, r2
 80007b2:	803b      	strh	r3, [r7, #0]
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 80007b4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80007b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007bc:	4293      	cmp	r3, r2
 80007be:	bfa8      	it	ge
 80007c0:	4613      	movge	r3, r2
 80007c2:	b21b      	sxth	r3, r3
 80007c4:	0fda      	lsrs	r2, r3, #31
 80007c6:	4413      	add	r3, r2
 80007c8:	105b      	asrs	r3, r3, #1
 80007ca:	81fb      	strh	r3, [r7, #14]
  if (r > max_radius)
 80007cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80007d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	dd01      	ble.n	80007dc <fillRoundRect+0x46>
    r = max_radius;
 80007d8:	89fb      	ldrh	r3, [r7, #14]
 80007da:	843b      	strh	r3, [r7, #32]
  // smarter version
  writeFillRect(x, y + r, w, h - (r << 1), color);
 80007dc:	88ba      	ldrh	r2, [r7, #4]
 80007de:	8c3b      	ldrh	r3, [r7, #32]
 80007e0:	4413      	add	r3, r2
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	b219      	sxth	r1, r3
 80007e6:	883a      	ldrh	r2, [r7, #0]
 80007e8:	8c3b      	ldrh	r3, [r7, #32]
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	b21c      	sxth	r4, r3
 80007f4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80007f8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	4623      	mov	r3, r4
 8000802:	f000 fe13 	bl	800142c <writeFillRect>
  // draw four corners
  fillEllipseHelper(x + r, y + r, r, r, 1, w - 2 * r - 1, color);
 8000806:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800080a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800080e:	18d0      	adds	r0, r2, r3
 8000810:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000814:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000818:	18d1      	adds	r1, r2, r3
 800081a:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800081e:	f9b7 5020 	ldrsh.w	r5, [r7, #32]
 8000822:	887a      	ldrh	r2, [r7, #2]
 8000824:	8c3b      	ldrh	r3, [r7, #32]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	b29b      	uxth	r3, r3
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	b29b      	uxth	r3, r3
 800082e:	3b01      	subs	r3, #1
 8000830:	b29b      	uxth	r3, r3
 8000832:	b21b      	sxth	r3, r3
 8000834:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000836:	9202      	str	r2, [sp, #8]
 8000838:	9301      	str	r3, [sp, #4]
 800083a:	2301      	movs	r3, #1
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	462b      	mov	r3, r5
 8000840:	4622      	mov	r2, r4
 8000842:	f000 fed7 	bl	80015f4 <fillEllipseHelper>
  fillEllipseHelper(x + r, y + h - r - 1, r, r, 2, w - 2 * r - 1, color);
 8000846:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800084a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800084e:	18d0      	adds	r0, r2, r3
 8000850:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000854:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000858:	441a      	add	r2, r3
 800085a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	1e59      	subs	r1, r3, #1
 8000862:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8000866:	f9b7 5020 	ldrsh.w	r5, [r7, #32]
 800086a:	887a      	ldrh	r2, [r7, #2]
 800086c:	8c3b      	ldrh	r3, [r7, #32]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	b29b      	uxth	r3, r3
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	b29b      	uxth	r3, r3
 8000876:	3b01      	subs	r3, #1
 8000878:	b29b      	uxth	r3, r3
 800087a:	b21b      	sxth	r3, r3
 800087c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800087e:	9202      	str	r2, [sp, #8]
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	2302      	movs	r3, #2
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	462b      	mov	r3, r5
 8000888:	4622      	mov	r2, r4
 800088a:	f000 feb3 	bl	80015f4 <fillEllipseHelper>
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000898 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a06      	ldr	r2, [pc, #24]	; (80008bc <HAL_SPI_TxCpltCallback+0x24>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d104      	bne.n	80008b2 <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2140      	movs	r1, #64	; 0x40
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <HAL_SPI_TxCpltCallback+0x28>)
 80008ae:	f001 fdd9 	bl	8002464 <HAL_GPIO_WritePin>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000002c 	.word	0x2000002c
 80008c0:	48000400 	.word	0x48000400

080008c4 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80008ce:	bf00      	nop
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <ILI9341_SPI_Tx+0x30>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d1f8      	bne.n	80008d0 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_IT(HSPI_INSTANCE, &data, 1);
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	2201      	movs	r2, #1
 80008e2:	4619      	mov	r1, r3
 80008e4:	4803      	ldr	r0, [pc, #12]	; (80008f4 <ILI9341_SPI_Tx+0x30>)
 80008e6:	f003 fb0d 	bl	8003f04 <HAL_SPI_Transmit_IT>
//	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
//	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000002c 	.word	0x2000002c

080008f8 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000904:	bf00      	nop
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <ILI9341_SPI_TxBuffer+0x30>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	f003 0302 	and.w	r3, r3, #2
 8000910:	2b02      	cmp	r3, #2
 8000912:	d1f8      	bne.n	8000906 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_IT(HSPI_INSTANCE, buffer, len);
 8000914:	887b      	ldrh	r3, [r7, #2]
 8000916:	461a      	mov	r2, r3
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	4803      	ldr	r0, [pc, #12]	; (8000928 <ILI9341_SPI_TxBuffer+0x30>)
 800091c:	f003 faf2 	bl	8003f04 <HAL_SPI_Transmit_IT>
//	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
//	HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2000002c 	.word	0x2000002c

0800092c <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000936:	2200      	movs	r2, #0
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	480a      	ldr	r0, [pc, #40]	; (8000964 <ILI9341_WriteCommand+0x38>)
 800093c:	f001 fd92 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000940:	2200      	movs	r2, #0
 8000942:	2140      	movs	r1, #64	; 0x40
 8000944:	4808      	ldr	r0, [pc, #32]	; (8000968 <ILI9341_WriteCommand+0x3c>)
 8000946:	f001 fd8d 	bl	8002464 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ffb9 	bl	80008c4 <ILI9341_SPI_Tx>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
 8000952:	2201      	movs	r2, #1
 8000954:	2140      	movs	r1, #64	; 0x40
 8000956:	4804      	ldr	r0, [pc, #16]	; (8000968 <ILI9341_WriteCommand+0x3c>)
 8000958:	f001 fd84 	bl	8002464 <HAL_GPIO_WritePin>
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	48000800 	.word	0x48000800
 8000968:	48000400 	.word	0x48000400

0800096c <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000976:	2201      	movs	r2, #1
 8000978:	2180      	movs	r1, #128	; 0x80
 800097a:	480a      	ldr	r0, [pc, #40]	; (80009a4 <ILI9341_WriteData+0x38>)
 800097c:	f001 fd72 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000980:	2200      	movs	r2, #0
 8000982:	2140      	movs	r1, #64	; 0x40
 8000984:	4808      	ldr	r0, [pc, #32]	; (80009a8 <ILI9341_WriteData+0x3c>)
 8000986:	f001 fd6d 	bl	8002464 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff99 	bl	80008c4 <ILI9341_SPI_Tx>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
 8000992:	2201      	movs	r2, #1
 8000994:	2140      	movs	r1, #64	; 0x40
 8000996:	4804      	ldr	r0, [pc, #16]	; (80009a8 <ILI9341_WriteData+0x3c>)
 8000998:	f001 fd64 	bl	8002464 <HAL_GPIO_WritePin>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	48000800 	.word	0x48000800
 80009a8:	48000400 	.word	0x48000400

080009ac <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80009b8:	2201      	movs	r2, #1
 80009ba:	2180      	movs	r1, #128	; 0x80
 80009bc:	480a      	ldr	r0, [pc, #40]	; (80009e8 <ILI9341_WriteBuffer+0x3c>)
 80009be:	f001 fd51 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80009c2:	2200      	movs	r2, #0
 80009c4:	2140      	movs	r1, #64	; 0x40
 80009c6:	4809      	ldr	r0, [pc, #36]	; (80009ec <ILI9341_WriteBuffer+0x40>)
 80009c8:	f001 fd4c 	bl	8002464 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 80009cc:	887b      	ldrh	r3, [r7, #2]
 80009ce:	4619      	mov	r1, r3
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ff91 	bl	80008f8 <ILI9341_SPI_TxBuffer>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
 80009d6:	2201      	movs	r2, #1
 80009d8:	2140      	movs	r1, #64	; 0x40
 80009da:	4804      	ldr	r0, [pc, #16]	; (80009ec <ILI9341_WriteBuffer+0x40>)
 80009dc:	f001 fd42 	bl	8002464 <HAL_GPIO_WritePin>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	48000800 	.word	0x48000800
 80009ec:	48000400 	.word	0x48000400

080009f0 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4604      	mov	r4, r0
 80009f8:	4608      	mov	r0, r1
 80009fa:	4611      	mov	r1, r2
 80009fc:	461a      	mov	r2, r3
 80009fe:	4623      	mov	r3, r4
 8000a00:	80fb      	strh	r3, [r7, #6]
 8000a02:	4603      	mov	r3, r0
 8000a04:	80bb      	strh	r3, [r7, #4]
 8000a06:	460b      	mov	r3, r1
 8000a08:	807b      	strh	r3, [r7, #2]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8000a18:	88fb      	ldrh	r3, [r7, #6]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000a1e:	887b      	ldrh	r3, [r7, #2]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8000a28:	887b      	ldrh	r3, [r7, #2]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000a2e:	202a      	movs	r0, #42	; 0x2a
 8000a30:	f7ff ff7c 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	2104      	movs	r1, #4
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ffb6 	bl	80009ac <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000a40:	88bb      	ldrh	r3, [r7, #4]
 8000a42:	0a1b      	lsrs	r3, r3, #8
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000a4a:	88bb      	ldrh	r3, [r7, #4]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000a50:	883b      	ldrh	r3, [r7, #0]
 8000a52:	0a1b      	lsrs	r3, r3, #8
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000a5a:	883b      	ldrh	r3, [r7, #0]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000a60:	202b      	movs	r0, #43	; 0x2b
 8000a62:	f7ff ff63 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2104      	movs	r1, #4
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff9d 	bl	80009ac <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000a72:	202c      	movs	r0, #44	; 0x2c
 8000a74:	f7ff ff5a 	bl	800092c <ILI9341_WriteCommand>
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd90      	pop	{r4, r7, pc}

08000a80 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8e:	f001 fce9 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000a92:	200a      	movs	r0, #10
 8000a94:	f001 f9c6 	bl	8001e24 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2140      	movs	r1, #64	; 0x40
 8000a9c:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <ILI9341_Reset+0x44>)
 8000a9e:	f001 fce1 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000aa2:	200a      	movs	r0, #10
 8000aa4:	f001 f9be 	bl	8001e24 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab2:	f001 fcd7 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2140      	movs	r1, #64	; 0x40
 8000aba:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <ILI9341_Reset+0x44>)
 8000abc:	f001 fcd2 	bl	8002464 <HAL_GPIO_WritePin>
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	48000400 	.word	0x48000400

08000ac8 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad6:	f001 fcc5 	bl	8002464 <HAL_GPIO_WritePin>
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}

08000ade <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000ae2:	f7ff fff1 	bl	8000ac8 <ILI9341_Enable>
	ILI9341_Reset();
 8000ae6:	f7ff ffcb 	bl	8000a80 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000aea:	2001      	movs	r0, #1
 8000aec:	f7ff ff1e 	bl	800092c <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000af0:	200a      	movs	r0, #10
 8000af2:	f001 f997 	bl	8001e24 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000af6:	20cb      	movs	r0, #203	; 0xcb
 8000af8:	f7ff ff18 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000afc:	2039      	movs	r0, #57	; 0x39
 8000afe:	f7ff ff35 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000b02:	202c      	movs	r0, #44	; 0x2c
 8000b04:	f7ff ff32 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff ff2f 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000b0e:	2034      	movs	r0, #52	; 0x34
 8000b10:	f7ff ff2c 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000b14:	2002      	movs	r0, #2
 8000b16:	f7ff ff29 	bl	800096c <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000b1a:	20cf      	movs	r0, #207	; 0xcf
 8000b1c:	f7ff ff06 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff ff23 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000b26:	20c1      	movs	r0, #193	; 0xc1
 8000b28:	f7ff ff20 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000b2c:	2030      	movs	r0, #48	; 0x30
 8000b2e:	f7ff ff1d 	bl	800096c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000b32:	20e8      	movs	r0, #232	; 0xe8
 8000b34:	f7ff fefa 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000b38:	2085      	movs	r0, #133	; 0x85
 8000b3a:	f7ff ff17 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f7ff ff14 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000b44:	2078      	movs	r0, #120	; 0x78
 8000b46:	f7ff ff11 	bl	800096c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000b4a:	20ea      	movs	r0, #234	; 0xea
 8000b4c:	f7ff feee 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff ff0b 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f7ff ff08 	bl	800096c <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000b5c:	20ed      	movs	r0, #237	; 0xed
 8000b5e:	f7ff fee5 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000b62:	2064      	movs	r0, #100	; 0x64
 8000b64:	f7ff ff02 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f7ff feff 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000b6e:	2012      	movs	r0, #18
 8000b70:	f7ff fefc 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000b74:	2081      	movs	r0, #129	; 0x81
 8000b76:	f7ff fef9 	bl	800096c <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000b7a:	20f7      	movs	r0, #247	; 0xf7
 8000b7c:	f7ff fed6 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000b80:	2020      	movs	r0, #32
 8000b82:	f7ff fef3 	bl	800096c <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000b86:	20c0      	movs	r0, #192	; 0xc0
 8000b88:	f7ff fed0 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000b8c:	2023      	movs	r0, #35	; 0x23
 8000b8e:	f7ff feed 	bl	800096c <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000b92:	20c1      	movs	r0, #193	; 0xc1
 8000b94:	f7ff feca 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000b98:	2010      	movs	r0, #16
 8000b9a:	f7ff fee7 	bl	800096c <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000b9e:	20c5      	movs	r0, #197	; 0xc5
 8000ba0:	f7ff fec4 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000ba4:	203e      	movs	r0, #62	; 0x3e
 8000ba6:	f7ff fee1 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000baa:	2028      	movs	r0, #40	; 0x28
 8000bac:	f7ff fede 	bl	800096c <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000bb0:	20c7      	movs	r0, #199	; 0xc7
 8000bb2:	f7ff febb 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000bb6:	2086      	movs	r0, #134	; 0x86
 8000bb8:	f7ff fed8 	bl	800096c <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000bbc:	2036      	movs	r0, #54	; 0x36
 8000bbe:	f7ff feb5 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000bc2:	2048      	movs	r0, #72	; 0x48
 8000bc4:	f7ff fed2 	bl	800096c <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000bc8:	203a      	movs	r0, #58	; 0x3a
 8000bca:	f7ff feaf 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000bce:	2055      	movs	r0, #85	; 0x55
 8000bd0:	f7ff fecc 	bl	800096c <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000bd4:	20b1      	movs	r0, #177	; 0xb1
 8000bd6:	f7ff fea9 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff fec6 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000be0:	2018      	movs	r0, #24
 8000be2:	f7ff fec3 	bl	800096c <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000be6:	20b6      	movs	r0, #182	; 0xb6
 8000be8:	f7ff fea0 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000bec:	2008      	movs	r0, #8
 8000bee:	f7ff febd 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000bf2:	2082      	movs	r0, #130	; 0x82
 8000bf4:	f7ff feba 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000bf8:	2027      	movs	r0, #39	; 0x27
 8000bfa:	f7ff feb7 	bl	800096c <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000bfe:	20f2      	movs	r0, #242	; 0xf2
 8000c00:	f7ff fe94 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff feb1 	bl	800096c <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000c0a:	2026      	movs	r0, #38	; 0x26
 8000c0c:	f7ff fe8e 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f7ff feab 	bl	800096c <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000c16:	20e0      	movs	r0, #224	; 0xe0
 8000c18:	f7ff fe88 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000c1c:	200f      	movs	r0, #15
 8000c1e:	f7ff fea5 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000c22:	2031      	movs	r0, #49	; 0x31
 8000c24:	f7ff fea2 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000c28:	202b      	movs	r0, #43	; 0x2b
 8000c2a:	f7ff fe9f 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000c2e:	200c      	movs	r0, #12
 8000c30:	f7ff fe9c 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000c34:	200e      	movs	r0, #14
 8000c36:	f7ff fe99 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000c3a:	2008      	movs	r0, #8
 8000c3c:	f7ff fe96 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000c40:	204e      	movs	r0, #78	; 0x4e
 8000c42:	f7ff fe93 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000c46:	20f1      	movs	r0, #241	; 0xf1
 8000c48:	f7ff fe90 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000c4c:	2037      	movs	r0, #55	; 0x37
 8000c4e:	f7ff fe8d 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000c52:	2007      	movs	r0, #7
 8000c54:	f7ff fe8a 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000c58:	2010      	movs	r0, #16
 8000c5a:	f7ff fe87 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000c5e:	2003      	movs	r0, #3
 8000c60:	f7ff fe84 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000c64:	200e      	movs	r0, #14
 8000c66:	f7ff fe81 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000c6a:	2009      	movs	r0, #9
 8000c6c:	f7ff fe7e 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff fe7b 	bl	800096c <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000c76:	20e1      	movs	r0, #225	; 0xe1
 8000c78:	f7ff fe58 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff fe75 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000c82:	200e      	movs	r0, #14
 8000c84:	f7ff fe72 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000c88:	2014      	movs	r0, #20
 8000c8a:	f7ff fe6f 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000c8e:	2003      	movs	r0, #3
 8000c90:	f7ff fe6c 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000c94:	2011      	movs	r0, #17
 8000c96:	f7ff fe69 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000c9a:	2007      	movs	r0, #7
 8000c9c:	f7ff fe66 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000ca0:	2031      	movs	r0, #49	; 0x31
 8000ca2:	f7ff fe63 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000ca6:	20c1      	movs	r0, #193	; 0xc1
 8000ca8:	f7ff fe60 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000cac:	2048      	movs	r0, #72	; 0x48
 8000cae:	f7ff fe5d 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000cb2:	2008      	movs	r0, #8
 8000cb4:	f7ff fe5a 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000cb8:	200f      	movs	r0, #15
 8000cba:	f7ff fe57 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000cbe:	200c      	movs	r0, #12
 8000cc0:	f7ff fe54 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000cc4:	2031      	movs	r0, #49	; 0x31
 8000cc6:	f7ff fe51 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000cca:	2036      	movs	r0, #54	; 0x36
 8000ccc:	f7ff fe4e 	bl	800096c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000cd0:	200f      	movs	r0, #15
 8000cd2:	f7ff fe4b 	bl	800096c <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000cd6:	2011      	movs	r0, #17
 8000cd8:	f7ff fe28 	bl	800092c <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000cdc:	2064      	movs	r0, #100	; 0x64
 8000cde:	f001 f8a1 	bl	8001e24 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000ce2:	2029      	movs	r0, #41	; 0x29
 8000ce4:	f7ff fe22 	bl	800092c <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f000 f803 	bl	8000cf4 <ILI9341_SetRotation>
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000cfe:	2036      	movs	r0, #54	; 0x36
 8000d00:	f7ff fe14 	bl	800092c <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000d04:	2001      	movs	r0, #1
 8000d06:	f001 f88d 	bl	8001e24 <HAL_Delay>

	switch(rotation)
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d837      	bhi.n	8000d80 <ILI9341_SetRotation+0x8c>
 8000d10:	a201      	add	r2, pc, #4	; (adr r2, 8000d18 <ILI9341_SetRotation+0x24>)
 8000d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d16:	bf00      	nop
 8000d18:	08000d29 	.word	0x08000d29
 8000d1c:	08000d3f 	.word	0x08000d3f
 8000d20:	08000d55 	.word	0x08000d55
 8000d24:	08000d6b 	.word	0x08000d6b
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000d28:	2048      	movs	r0, #72	; 0x48
 8000d2a:	f7ff fe1f 	bl	800096c <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <ILI9341_SetRotation+0x98>)
 8000d30:	22f0      	movs	r2, #240	; 0xf0
 8000d32:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <ILI9341_SetRotation+0x9c>)
 8000d36:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000d3a:	801a      	strh	r2, [r3, #0]
		break;
 8000d3c:	e021      	b.n	8000d82 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000d3e:	2028      	movs	r0, #40	; 0x28
 8000d40:	f7ff fe14 	bl	800096c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <ILI9341_SetRotation+0x98>)
 8000d46:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000d4a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <ILI9341_SetRotation+0x9c>)
 8000d4e:	22f0      	movs	r2, #240	; 0xf0
 8000d50:	801a      	strh	r2, [r3, #0]
		break;
 8000d52:	e016      	b.n	8000d82 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000d54:	2088      	movs	r0, #136	; 0x88
 8000d56:	f7ff fe09 	bl	800096c <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <ILI9341_SetRotation+0x98>)
 8000d5c:	22f0      	movs	r2, #240	; 0xf0
 8000d5e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <ILI9341_SetRotation+0x9c>)
 8000d62:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000d66:	801a      	strh	r2, [r3, #0]
		break;
 8000d68:	e00b      	b.n	8000d82 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000d6a:	20e8      	movs	r0, #232	; 0xe8
 8000d6c:	f7ff fdfe 	bl	800096c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <ILI9341_SetRotation+0x98>)
 8000d72:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000d76:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <ILI9341_SetRotation+0x9c>)
 8000d7a:	22f0      	movs	r2, #240	; 0xf0
 8000d7c:	801a      	strh	r2, [r3, #0]
		break;
 8000d7e:	e000      	b.n	8000d82 <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000d80:	bf00      	nop
	}
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000002 	.word	0x20000002
 8000d90:	20000000 	.word	0x20000000

08000d94 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d98:	b08d      	sub	sp, #52	; 0x34
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	6039      	str	r1, [r7, #0]
 8000da0:	80fb      	strh	r3, [r7, #6]
 8000da2:	466b      	mov	r3, sp
 8000da4:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000db2:	d202      	bcs.n	8000dba <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000db8:	e002      	b.n	8000dc0 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000dba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2180      	movs	r1, #128	; 0x80
 8000dc4:	483e      	ldr	r0, [pc, #248]	; (8000ec0 <ILI9341_DrawColorBurst+0x12c>)
 8000dc6:	f001 fb4d 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	483d      	ldr	r0, [pc, #244]	; (8000ec4 <ILI9341_DrawColorBurst+0x130>)
 8000dd0:	f001 fb48 	bl	8002464 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000dd4:	88fb      	ldrh	r3, [r7, #6]
 8000dd6:	0a1b      	lsrs	r3, r3, #8
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8000dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000de0:	460b      	mov	r3, r1
 8000de2:	3b01      	subs	r3, #1
 8000de4:	61fb      	str	r3, [r7, #28]
 8000de6:	2300      	movs	r3, #0
 8000de8:	4688      	mov	r8, r1
 8000dea:	4699      	mov	r9, r3
 8000dec:	f04f 0200 	mov.w	r2, #0
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000df8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000dfc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e00:	2300      	movs	r3, #0
 8000e02:	460c      	mov	r4, r1
 8000e04:	461d      	mov	r5, r3
 8000e06:	f04f 0200 	mov.w	r2, #0
 8000e0a:	f04f 0300 	mov.w	r3, #0
 8000e0e:	00eb      	lsls	r3, r5, #3
 8000e10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e14:	00e2      	lsls	r2, r4, #3
 8000e16:	1dcb      	adds	r3, r1, #7
 8000e18:	08db      	lsrs	r3, r3, #3
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	ebad 0d03 	sub.w	sp, sp, r3
 8000e20:	466b      	mov	r3, sp
 8000e22:	3300      	adds	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000e26:	2300      	movs	r3, #0
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e2a:	e00e      	b.n	8000e4a <ILI9341_DrawColorBurst+0xb6>
	{
		BurstBuffer[j] = chifted;
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e30:	4413      	add	r3, r2
 8000e32:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e36:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	88fa      	ldrh	r2, [r7, #6]
 8000e3e:	b2d1      	uxtb	r1, r2
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e46:	3302      	adds	r3, #2
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d3ec      	bcc.n	8000e2c <ILI9341_DrawColorBurst+0x98>
	}

	uint32_t SendingSize = size * 2;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e60:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e66:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e6c:	fb01 f202 	mul.w	r2, r1, r2
 8000e70:	1a9b      	subs	r3, r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d010      	beq.n	8000e9c <ILI9341_DrawColorBurst+0x108>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7e:	e009      	b.n	8000e94 <ILI9341_DrawColorBurst+0x100>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	230a      	movs	r3, #10
 8000e86:	69b9      	ldr	r1, [r7, #24]
 8000e88:	480f      	ldr	r0, [pc, #60]	; (8000ec8 <ILI9341_DrawColorBurst+0x134>)
 8000e8a:	f002 fec6 	bl	8003c1a <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	3301      	adds	r3, #1
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
 8000e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d3f1      	bcc.n	8000e80 <ILI9341_DrawColorBurst+0xec>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	230a      	movs	r3, #10
 8000ea2:	69b9      	ldr	r1, [r7, #24]
 8000ea4:	4808      	ldr	r0, [pc, #32]	; (8000ec8 <ILI9341_DrawColorBurst+0x134>)
 8000ea6:	f002 feb8 	bl	8003c1a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2140      	movs	r1, #64	; 0x40
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <ILI9341_DrawColorBurst+0x130>)
 8000eb0:	f001 fad8 	bl	8002464 <HAL_GPIO_WritePin>
 8000eb4:	46b5      	mov	sp, r6
}
 8000eb6:	bf00      	nop
 8000eb8:	3734      	adds	r7, #52	; 0x34
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ec0:	48000800 	.word	0x48000800
 8000ec4:	48000400 	.word	0x48000400
 8000ec8:	2000002c 	.word	0x2000002c

08000ecc <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <ILI9341_FillScreen+0x44>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <ILI9341_FillScreen+0x48>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff fd83 	bl	80009f0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <ILI9341_FillScreen+0x44>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <ILI9341_FillScreen+0x48>)
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	fb02 f303 	mul.w	r3, r2, r3
 8000efc:	461a      	mov	r2, r3
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff46 	bl	8000d94 <ILI9341_DrawColorBurst>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000002 	.word	0x20000002
 8000f14:	20000000 	.word	0x20000000

08000f18 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	80fb      	strh	r3, [r7, #6]
 8000f22:	460b      	mov	r3, r1
 8000f24:	80bb      	strh	r3, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <ILI9341_DrawPixel+0xc4>)
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d24d      	bcs.n	8000fd2 <ILI9341_DrawPixel+0xba>
 8000f36:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <ILI9341_DrawPixel+0xc8>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	88ba      	ldrh	r2, [r7, #4]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d247      	bcs.n	8000fd2 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	753b      	strb	r3, [r7, #20]
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	757b      	strb	r3, [r7, #21]
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	3301      	adds	r3, #1
 8000f56:	121b      	asrs	r3, r3, #8
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	75bb      	strb	r3, [r7, #22]
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	3301      	adds	r3, #1
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000f66:	88bb      	ldrh	r3, [r7, #4]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	743b      	strb	r3, [r7, #16]
 8000f70:	88bb      	ldrh	r3, [r7, #4]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	747b      	strb	r3, [r7, #17]
 8000f76:	88bb      	ldrh	r3, [r7, #4]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	121b      	asrs	r3, r3, #8
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	74bb      	strb	r3, [r7, #18]
 8000f80:	88bb      	ldrh	r3, [r7, #4]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	3301      	adds	r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8000f8a:	887b      	ldrh	r3, [r7, #2]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	733b      	strb	r3, [r7, #12]
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8000f9a:	202a      	movs	r0, #42	; 0x2a
 8000f9c:	f7ff fcc6 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2104      	movs	r1, #4
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fd00 	bl	80009ac <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000fac:	202b      	movs	r0, #43	; 0x2b
 8000fae:	f7ff fcbd 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fcf7 	bl	80009ac <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8000fbe:	202c      	movs	r0, #44	; 0x2c
 8000fc0:	f7ff fcb4 	bl	800092c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2102      	movs	r1, #2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fcee 	bl	80009ac <ILI9341_WriteBuffer>
 8000fd0:	e000      	b.n	8000fd4 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000fd2:	bf00      	nop
}
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000002 	.word	0x20000002
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <drawFastHLine>:
	ILI9341_DrawColorBurst(color, height);
}

/**************************************************************************************/
void drawFastHLine(int16_t x, int16_t y,int16_t w, uint16_t color)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4604      	mov	r4, r0
 8000fec:	4608      	mov	r0, r1
 8000fee:	4611      	mov	r1, r2
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	80fb      	strh	r3, [r7, #6]
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80bb      	strh	r3, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	807b      	strh	r3, [r7, #2]
 8000ffe:	4613      	mov	r3, r2
 8001000:	803b      	strh	r3, [r7, #0]
	writeFastHLine(x, y, w, color);
 8001002:	883b      	ldrh	r3, [r7, #0]
 8001004:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001008:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800100c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001010:	f000 fa98 	bl	8001544 <writeFastHLine>
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bd90      	pop	{r4, r7, pc}

0800101c <drawFastVLine>:

void drawFastVLine(int16_t x, int16_t y,int16_t h, uint16_t color)
{
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4604      	mov	r4, r0
 8001024:	4608      	mov	r0, r1
 8001026:	4611      	mov	r1, r2
 8001028:	461a      	mov	r2, r3
 800102a:	4623      	mov	r3, r4
 800102c:	80fb      	strh	r3, [r7, #6]
 800102e:	4603      	mov	r3, r0
 8001030:	80bb      	strh	r3, [r7, #4]
 8001032:	460b      	mov	r3, r1
 8001034:	807b      	strh	r3, [r7, #2]
 8001036:	4613      	mov	r3, r2
 8001038:	803b      	strh	r3, [r7, #0]
  writeFastVLine(x, y, h, color);
 800103a:	883b      	ldrh	r3, [r7, #0]
 800103c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001040:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001044:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001048:	f000 faa8 	bl	800159c <writeFastVLine>
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bd90      	pop	{r4, r7, pc}

08001054 <drawEllipseHelper>:
/**************************************************************************************/
void drawEllipseHelper(int32_t x, int32_t y,int32_t rx, int32_t ry,uint8_t cornername, uint16_t color)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	603b      	str	r3, [r7, #0]
  if (rx < 0 || ry < 0 || ((rx == 0) && (ry == 0)))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	f2c0 81ae 	blt.w	80013c6 <drawEllipseHelper+0x372>
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	f2c0 81aa 	blt.w	80013c6 <drawEllipseHelper+0x372>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d103      	bne.n	8001080 <drawEllipseHelper+0x2c>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 81a3 	beq.w	80013c6 <drawEllipseHelper+0x372>
  {
    return;
  }
  if (ry == 0)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d113      	bne.n	80010ae <drawEllipseHelper+0x5a>
  {
    drawFastHLine(x - rx, y, (ry << 2) + 1, color);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	b29a      	uxth	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	b29b      	uxth	r3, r3
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	b29b      	uxth	r3, r3
 8001092:	b218      	sxth	r0, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	b219      	sxth	r1, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b29b      	uxth	r3, r3
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	b29b      	uxth	r3, r3
 80010a0:	3301      	adds	r3, #1
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80010a8:	f7ff ff9c 	bl	8000fe4 <drawFastHLine>
    return;
 80010ac:	e18c      	b.n	80013c8 <drawEllipseHelper+0x374>
  }
  if (rx == 0)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d113      	bne.n	80010dc <drawEllipseHelper+0x88>
  {
    drawFastVLine(x, y - ry, (rx << 2) + 1, color);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	b218      	sxth	r0, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	b219      	sxth	r1, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	3301      	adds	r3, #1
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80010d6:	f7ff ffa1 	bl	800101c <drawFastVLine>
    return;
 80010da:	e175      	b.n	80013c8 <drawEllipseHelper+0x374>
  }

  int32_t xt, yt, s, i;
  int32_t rx2 = rx * rx;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	fb03 f303 	mul.w	r3, r3, r3
 80010e2:	617b      	str	r3, [r7, #20]
  int32_t ry2 = ry * ry;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	fb03 f303 	mul.w	r3, r3, r3
 80010ea:	613b      	str	r3, [r7, #16]

  i = -1;
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	61bb      	str	r3, [r7, #24]
  xt = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  yt = ry;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	623b      	str	r3, [r7, #32]
  s = (ry2 << 1) + rx2 * (1 - (ry << 1));
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	005a      	lsls	r2, r3, #1
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	f1c3 0301 	rsb	r3, r3, #1
 8001106:	6979      	ldr	r1, [r7, #20]
 8001108:	fb01 f303 	mul.w	r3, r1, r3
 800110c:	4413      	add	r3, r2
 800110e:	61fb      	str	r3, [r7, #28]
  do
  {
    while (s < 0)
 8001110:	e00b      	b.n	800112a <drawEllipseHelper+0xd6>
      s += ry2 * ((++xt << 2) + 2);
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	3301      	adds	r3, #1
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
 8001118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	fb02 f303 	mul.w	r3, r2, r3
 8001124:	69fa      	ldr	r2, [r7, #28]
 8001126:	4413      	add	r3, r2
 8001128:	61fb      	str	r3, [r7, #28]
    while (s < 0)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	2b00      	cmp	r3, #0
 800112e:	dbf0      	blt.n	8001112 <drawEllipseHelper+0xbe>
    if (cornername & 0x1)
 8001130:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d017      	beq.n	800116c <drawEllipseHelper+0x118>
    {
      writeFastHLine(x - xt, y - yt, xt - i, color);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	b29a      	uxth	r2, r3
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	b29b      	uxth	r3, r3
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	b29b      	uxth	r3, r3
 8001148:	b218      	sxth	r0, r3
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	b29a      	uxth	r2, r3
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	b29b      	uxth	r3, r3
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	b29b      	uxth	r3, r3
 8001156:	b219      	sxth	r1, r3
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	b29a      	uxth	r2, r3
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	b29b      	uxth	r3, r3
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	b29b      	uxth	r3, r3
 8001164:	b21a      	sxth	r2, r3
 8001166:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001168:	f000 f9ec 	bl	8001544 <writeFastHLine>
    }
    if (cornername & 0x2)
 800116c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d019      	beq.n	80011ac <drawEllipseHelper+0x158>
    {
      writeFastHLine(x + i + 1, y - yt, xt - i, color);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	b29a      	uxth	r2, r3
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	b29b      	uxth	r3, r3
 8001180:	4413      	add	r3, r2
 8001182:	b29b      	uxth	r3, r3
 8001184:	3301      	adds	r3, #1
 8001186:	b29b      	uxth	r3, r3
 8001188:	b218      	sxth	r0, r3
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	b29a      	uxth	r2, r3
 800118e:	6a3b      	ldr	r3, [r7, #32]
 8001190:	b29b      	uxth	r3, r3
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	b29b      	uxth	r3, r3
 8001196:	b219      	sxth	r1, r3
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	b29a      	uxth	r2, r3
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80011a8:	f000 f9cc 	bl	8001544 <writeFastHLine>
    }
    if (cornername & 0x4)
 80011ac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d019      	beq.n	80011ec <drawEllipseHelper+0x198>
    {
      writeFastHLine(x + i + 1, y + yt, xt - i, color);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	4413      	add	r3, r2
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	3301      	adds	r3, #1
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	b218      	sxth	r0, r3
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	4413      	add	r3, r2
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	b219      	sxth	r1, r3
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	b29a      	uxth	r2, r3
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80011e8:	f000 f9ac 	bl	8001544 <writeFastHLine>
    }
    if (cornername & 0x8)
 80011ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80011f0:	f003 0308 	and.w	r3, r3, #8
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d017      	beq.n	8001228 <drawEllipseHelper+0x1d4>
    {
      writeFastHLine(x - xt, y + yt, xt - i, color);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	b29b      	uxth	r3, r3
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	b29b      	uxth	r3, r3
 8001204:	b218      	sxth	r0, r3
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	b29a      	uxth	r2, r3
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	b29b      	uxth	r3, r3
 800120e:	4413      	add	r3, r2
 8001210:	b29b      	uxth	r3, r3
 8001212:	b219      	sxth	r1, r3
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	b29a      	uxth	r2, r3
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	b29b      	uxth	r3, r3
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	b29b      	uxth	r3, r3
 8001220:	b21a      	sxth	r2, r3
 8001222:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001224:	f000 f98e 	bl	8001544 <writeFastHLine>
    }
    i = xt;
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	61bb      	str	r3, [r7, #24]
    s -= (--yt) * rx2 << 2;
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	3b01      	subs	r3, #1
 8001230:	623b      	str	r3, [r7, #32]
 8001232:	6a3b      	ldr	r3, [r7, #32]
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	fb02 f303 	mul.w	r3, r2, r3
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	61fb      	str	r3, [r7, #28]
  } while (ry2 * xt <= rx2 * yt);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001246:	fb03 f202 	mul.w	r2, r3, r2
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	6a39      	ldr	r1, [r7, #32]
 800124e:	fb01 f303 	mul.w	r3, r1, r3
 8001252:	429a      	cmp	r2, r3
 8001254:	f77f af69 	ble.w	800112a <drawEllipseHelper+0xd6>

  i = -1;
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	61bb      	str	r3, [r7, #24]
  yt = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  xt = rx;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  s = (rx2 << 1) + ry2 * (1 - (rx << 1));
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	005a      	lsls	r2, r3, #1
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	f1c3 0301 	rsb	r3, r3, #1
 8001272:	6939      	ldr	r1, [r7, #16]
 8001274:	fb01 f303 	mul.w	r3, r1, r3
 8001278:	4413      	add	r3, r2
 800127a:	61fb      	str	r3, [r7, #28]
  do
  {
    while (s < 0)
 800127c:	e00b      	b.n	8001296 <drawEllipseHelper+0x242>
      s += rx2 * ((++yt << 2) + 2);
 800127e:	6a3b      	ldr	r3, [r7, #32]
 8001280:	3301      	adds	r3, #1
 8001282:	623b      	str	r3, [r7, #32]
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	3302      	adds	r3, #2
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	fb02 f303 	mul.w	r3, r2, r3
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	4413      	add	r3, r2
 8001294:	61fb      	str	r3, [r7, #28]
    while (s < 0)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	2b00      	cmp	r3, #0
 800129a:	dbf0      	blt.n	800127e <drawEllipseHelper+0x22a>
    if (cornername & 0x1)
 800129c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d017      	beq.n	80012d8 <drawEllipseHelper+0x284>
    {
      writeFastVLine(x - xt, y - yt, yt - i, color);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	b218      	sxth	r0, r3
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	b219      	sxth	r1, r3
 80012c4:	6a3b      	ldr	r3, [r7, #32]
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012d4:	f000 f962 	bl	800159c <writeFastVLine>
    }
    if (cornername & 0x2)
 80012d8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d017      	beq.n	8001314 <drawEllipseHelper+0x2c0>
    {
      writeFastVLine(x + xt, y - yt, yt - i, color);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	4413      	add	r3, r2
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	b218      	sxth	r0, r3
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	b219      	sxth	r1, r3
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	b29a      	uxth	r2, r3
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	b29b      	uxth	r3, r3
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	b29b      	uxth	r3, r3
 800130c:	b21a      	sxth	r2, r3
 800130e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001310:	f000 f944 	bl	800159c <writeFastVLine>
    }
    if (cornername & 0x4)
 8001314:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d019      	beq.n	8001354 <drawEllipseHelper+0x300>
    {
      writeFastVLine(x + xt, y + i + 1, yt - i, color);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	b29a      	uxth	r2, r3
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	b29b      	uxth	r3, r3
 8001328:	4413      	add	r3, r2
 800132a:	b29b      	uxth	r3, r3
 800132c:	b218      	sxth	r0, r3
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	b29a      	uxth	r2, r3
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	b29b      	uxth	r3, r3
 8001336:	4413      	add	r3, r2
 8001338:	b29b      	uxth	r3, r3
 800133a:	3301      	adds	r3, #1
 800133c:	b29b      	uxth	r3, r3
 800133e:	b219      	sxth	r1, r3
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	b29a      	uxth	r2, r3
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	b29b      	uxth	r3, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	b29b      	uxth	r3, r3
 800134c:	b21a      	sxth	r2, r3
 800134e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001350:	f000 f924 	bl	800159c <writeFastVLine>
    }
    if (cornername & 0x8)
 8001354:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	2b00      	cmp	r3, #0
 800135e:	d019      	beq.n	8001394 <drawEllipseHelper+0x340>
    {
      writeFastVLine(x - xt, y + i + 1, yt - i, color);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	b29a      	uxth	r2, r3
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	b29b      	uxth	r3, r3
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	b29b      	uxth	r3, r3
 800136c:	b218      	sxth	r0, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	b29a      	uxth	r2, r3
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	b29b      	uxth	r3, r3
 8001376:	4413      	add	r3, r2
 8001378:	b29b      	uxth	r3, r3
 800137a:	3301      	adds	r3, #1
 800137c:	b29b      	uxth	r3, r3
 800137e:	b219      	sxth	r1, r3
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	b29a      	uxth	r2, r3
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	b29b      	uxth	r3, r3
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	b29b      	uxth	r3, r3
 800138c:	b21a      	sxth	r2, r3
 800138e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001390:	f000 f904 	bl	800159c <writeFastVLine>
    }
    i = yt;
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	61bb      	str	r3, [r7, #24]
    s -= (--xt) * ry2 << 2;
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	3b01      	subs	r3, #1
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	fb02 f303 	mul.w	r3, r2, r3
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	61fb      	str	r3, [r7, #28]
  } while (rx2 * yt <= ry2 * xt);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	6a3a      	ldr	r2, [r7, #32]
 80013b2:	fb03 f202 	mul.w	r2, r3, r2
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ba:	fb01 f303 	mul.w	r3, r1, r3
 80013be:	429a      	cmp	r2, r3
 80013c0:	f77f af69 	ble.w	8001296 <drawEllipseHelper+0x242>
 80013c4:	e000      	b.n	80013c8 <drawEllipseHelper+0x374>
    return;
 80013c6:	bf00      	nop
}
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <writeFillRectPreclipped>:

/**************************************************************************************/
void writeFillRectPreclipped(int16_t x, int16_t y, int16_t w, int16_t h,
                                          uint16_t color)
{
 80013ce:	b590      	push	{r4, r7, lr}
 80013d0:	b085      	sub	sp, #20
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4604      	mov	r4, r0
 80013d6:	4608      	mov	r0, r1
 80013d8:	4611      	mov	r1, r2
 80013da:	461a      	mov	r2, r3
 80013dc:	4623      	mov	r3, r4
 80013de:	80fb      	strh	r3, [r7, #6]
 80013e0:	4603      	mov	r3, r0
 80013e2:	80bb      	strh	r3, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
 80013e8:	4613      	mov	r3, r2
 80013ea:	803b      	strh	r3, [r7, #0]
  // Overwrite in subclasses if desired!
  for (int16_t i = y; i < y + h; i++)
 80013ec:	88bb      	ldrh	r3, [r7, #4]
 80013ee:	81fb      	strh	r3, [r7, #14]
 80013f0:	e00e      	b.n	8001410 <writeFillRectPreclipped+0x42>
  {
    writeFastHLine(x, i, w, color);
 80013f2:	8c3b      	ldrh	r3, [r7, #32]
 80013f4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80013f8:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80013fc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001400:	f000 f8a0 	bl	8001544 <writeFastHLine>
  for (int16_t i = y; i < y + h; i++)
 8001404:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001408:	b29b      	uxth	r3, r3
 800140a:	3301      	adds	r3, #1
 800140c:	b29b      	uxth	r3, r3
 800140e:	81fb      	strh	r3, [r7, #14]
 8001410:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001414:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001418:	f9b7 3000 	ldrsh.w	r3, [r7]
 800141c:	440b      	add	r3, r1
 800141e:	429a      	cmp	r2, r3
 8001420:	dbe7      	blt.n	80013f2 <writeFillRectPreclipped+0x24>
  }
}
 8001422:	bf00      	nop
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	bd90      	pop	{r4, r7, pc}

0800142c <writeFillRect>:
/**************************************************************************************/
void writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b087      	sub	sp, #28
 8001430:	af02      	add	r7, sp, #8
 8001432:	4604      	mov	r4, r0
 8001434:	4608      	mov	r0, r1
 8001436:	4611      	mov	r1, r2
 8001438:	461a      	mov	r2, r3
 800143a:	4623      	mov	r3, r4
 800143c:	80fb      	strh	r3, [r7, #6]
 800143e:	4603      	mov	r3, r0
 8001440:	80bb      	strh	r3, [r7, #4]
 8001442:	460b      	mov	r3, r1
 8001444:	807b      	strh	r3, [r7, #2]
 8001446:	4613      	mov	r3, r2
 8001448:	803b      	strh	r3, [r7, #0]
  if (w && h)
 800144a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d074      	beq.n	800153c <writeFillRect+0x110>
 8001452:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d070      	beq.n	800153c <writeFillRect+0x110>
  { // Nonzero width and height?
    if (w < 0)
 800145a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800145e:	2b00      	cmp	r3, #0
 8001460:	da0a      	bge.n	8001478 <writeFillRect+0x4c>
    {             // If negative width...
      x += w + 1; //   Move X to left edge
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	4413      	add	r3, r2
 8001468:	b29b      	uxth	r3, r3
 800146a:	3301      	adds	r3, #1
 800146c:	b29b      	uxth	r3, r3
 800146e:	80fb      	strh	r3, [r7, #6]
      w = -w;     //   Use positive width
 8001470:	887b      	ldrh	r3, [r7, #2]
 8001472:	425b      	negs	r3, r3
 8001474:	b29b      	uxth	r3, r3
 8001476:	807b      	strh	r3, [r7, #2]
    }
    if (x <= ILI9341_SCREEN_WIDTH-1)
 8001478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001480:	da5c      	bge.n	800153c <writeFillRect+0x110>
    { // Not off right
      if (h < 0)
 8001482:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	da0a      	bge.n	80014a0 <writeFillRect+0x74>
      {             // If negative height...
        y += h + 1; //   Move Y to top edge
 800148a:	883a      	ldrh	r2, [r7, #0]
 800148c:	88bb      	ldrh	r3, [r7, #4]
 800148e:	4413      	add	r3, r2
 8001490:	b29b      	uxth	r3, r3
 8001492:	3301      	adds	r3, #1
 8001494:	b29b      	uxth	r3, r3
 8001496:	80bb      	strh	r3, [r7, #4]
        h = -h;     //   Use positive height
 8001498:	883b      	ldrh	r3, [r7, #0]
 800149a:	425b      	negs	r3, r3
 800149c:	b29b      	uxth	r3, r3
 800149e:	803b      	strh	r3, [r7, #0]
      }
      if (y <= ILI9341_SCREEN_HEIGHT-1)
 80014a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014a4:	2bef      	cmp	r3, #239	; 0xef
 80014a6:	dc49      	bgt.n	800153c <writeFillRect+0x110>
      { // Not off bottom
        int16_t x2 = x + w - 1;
 80014a8:	88fa      	ldrh	r2, [r7, #6]
 80014aa:	887b      	ldrh	r3, [r7, #2]
 80014ac:	4413      	add	r3, r2
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	3b01      	subs	r3, #1
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	81fb      	strh	r3, [r7, #14]
        if (x2 >= 0)
 80014b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	db3e      	blt.n	800153c <writeFillRect+0x110>
        { // Not off left
          int16_t y2 = y + h - 1;
 80014be:	88ba      	ldrh	r2, [r7, #4]
 80014c0:	883b      	ldrh	r3, [r7, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3b01      	subs	r3, #1
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	81bb      	strh	r3, [r7, #12]
          if (y2 >= 0)
 80014cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	db33      	blt.n	800153c <writeFillRect+0x110>
          { // Not off top
            // Rectangle partly or fully overlaps screen
            if (x < 0)
 80014d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da05      	bge.n	80014e8 <writeFillRect+0xbc>
            {
              x = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	80fb      	strh	r3, [r7, #6]
              w = x2 + 1;
 80014e0:	89fb      	ldrh	r3, [r7, #14]
 80014e2:	3301      	adds	r3, #1
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	807b      	strh	r3, [r7, #2]
            } // Clip left
            if (y < 0)
 80014e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	da05      	bge.n	80014fc <writeFillRect+0xd0>
            {
              y = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	80bb      	strh	r3, [r7, #4]
              h = y2 + 1;
 80014f4:	89bb      	ldrh	r3, [r7, #12]
 80014f6:	3301      	adds	r3, #1
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	803b      	strh	r3, [r7, #0]
            } // Clip top
            if (x2 > ILI9341_SCREEN_WIDTH-1)
 80014fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001500:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001504:	db04      	blt.n	8001510 <writeFillRect+0xe4>
            {
              w = ILI9341_SCREEN_WIDTH-1 - x + 1;
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800150c:	b29b      	uxth	r3, r3
 800150e:	807b      	strh	r3, [r7, #2]
            } // Clip right
            if (y2 > ILI9341_SCREEN_HEIGHT-1)
 8001510:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001514:	2bef      	cmp	r3, #239	; 0xef
 8001516:	dd04      	ble.n	8001522 <writeFillRect+0xf6>
            {
              h = ILI9341_SCREEN_HEIGHT-1 - y + 1;
 8001518:	88bb      	ldrh	r3, [r7, #4]
 800151a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800151e:	b29b      	uxth	r3, r3
 8001520:	803b      	strh	r3, [r7, #0]
            } // Clip bottom
            writeFillRectPreclipped(x, y, w, h, color);
 8001522:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001526:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800152a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800152e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001532:	8c3b      	ldrh	r3, [r7, #32]
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	4623      	mov	r3, r4
 8001538:	f7ff ff49 	bl	80013ce <writeFillRectPreclipped>
          }
        }
      }
    }
  }
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	bd90      	pop	{r4, r7, pc}

08001544 <writeFastHLine>:

/**************************************************************************************/
void writeFastHLine(int16_t x, int16_t y,int16_t w, uint16_t color)
{
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	4604      	mov	r4, r0
 800154c:	4608      	mov	r0, r1
 800154e:	4611      	mov	r1, r2
 8001550:	461a      	mov	r2, r3
 8001552:	4623      	mov	r3, r4
 8001554:	80fb      	strh	r3, [r7, #6]
 8001556:	4603      	mov	r3, r0
 8001558:	80bb      	strh	r3, [r7, #4]
 800155a:	460b      	mov	r3, r1
 800155c:	807b      	strh	r3, [r7, #2]
 800155e:	4613      	mov	r3, r2
 8001560:	803b      	strh	r3, [r7, #0]
  for (int16_t i = x; i < x + w; i++)
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	81fb      	strh	r3, [r7, #14]
 8001566:	e00b      	b.n	8001580 <writeFastHLine+0x3c>
  {
	  ILI9341_DrawPixel(i, y, color);
 8001568:	89fb      	ldrh	r3, [r7, #14]
 800156a:	88b9      	ldrh	r1, [r7, #4]
 800156c:	883a      	ldrh	r2, [r7, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fcd2 	bl	8000f18 <ILI9341_DrawPixel>
  for (int16_t i = x; i < x + w; i++)
 8001574:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001578:	b29b      	uxth	r3, r3
 800157a:	3301      	adds	r3, #1
 800157c:	b29b      	uxth	r3, r3
 800157e:	81fb      	strh	r3, [r7, #14]
 8001580:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001584:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001588:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800158c:	440b      	add	r3, r1
 800158e:	429a      	cmp	r2, r3
 8001590:	dbea      	blt.n	8001568 <writeFastHLine+0x24>
  }
}
 8001592:	bf00      	nop
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	bd90      	pop	{r4, r7, pc}

0800159c <writeFastVLine>:


void writeFastVLine(int16_t x, int16_t y,
                                 int16_t h, uint16_t color)
{
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4604      	mov	r4, r0
 80015a4:	4608      	mov	r0, r1
 80015a6:	4611      	mov	r1, r2
 80015a8:	461a      	mov	r2, r3
 80015aa:	4623      	mov	r3, r4
 80015ac:	80fb      	strh	r3, [r7, #6]
 80015ae:	4603      	mov	r3, r0
 80015b0:	80bb      	strh	r3, [r7, #4]
 80015b2:	460b      	mov	r3, r1
 80015b4:	807b      	strh	r3, [r7, #2]
 80015b6:	4613      	mov	r3, r2
 80015b8:	803b      	strh	r3, [r7, #0]
  for (int16_t i = y; i < y + h; i++)
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	81fb      	strh	r3, [r7, #14]
 80015be:	e00b      	b.n	80015d8 <writeFastVLine+0x3c>
  {
	  ILI9341_DrawPixel(x, i, color);
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	89f9      	ldrh	r1, [r7, #14]
 80015c4:	883a      	ldrh	r2, [r7, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fca6 	bl	8000f18 <ILI9341_DrawPixel>
  for (int16_t i = y; i < y + h; i++)
 80015cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	81fb      	strh	r3, [r7, #14]
 80015d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015e4:	440b      	add	r3, r1
 80015e6:	429a      	cmp	r2, r3
 80015e8:	dbea      	blt.n	80015c0 <writeFastVLine+0x24>
  }
}
 80015ea:	bf00      	nop
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd90      	pop	{r4, r7, pc}

080015f4 <fillEllipseHelper>:

/*****************************************************************************************/
void fillEllipseHelper(int32_t x, int32_t y,int32_t rx, int32_t ry,uint8_t corners, int16_t delta, uint16_t color)
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b08d      	sub	sp, #52	; 0x34
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	603b      	str	r3, [r7, #0]
  if (rx < 0 || ry < 0 || ((rx == 0) && (ry == 0)))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	f2c0 8162 	blt.w	80018ce <fillEllipseHelper+0x2da>
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	f2c0 815e 	blt.w	80018ce <fillEllipseHelper+0x2da>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d103      	bne.n	8001620 <fillEllipseHelper+0x2c>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 8157 	beq.w	80018ce <fillEllipseHelper+0x2da>
  {
    return;
  }
  if (ry == 0)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d114      	bne.n	8001650 <fillEllipseHelper+0x5c>
  {
    drawFastHLine(x - rx, y, (ry << 2) + 1, color);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	b29a      	uxth	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	b29b      	uxth	r3, r3
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	b29b      	uxth	r3, r3
 8001632:	b218      	sxth	r0, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	b219      	sxth	r1, r3
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b29b      	uxth	r3, r3
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	b29b      	uxth	r3, r3
 8001640:	3301      	adds	r3, #1
 8001642:	b29b      	uxth	r3, r3
 8001644:	b21a      	sxth	r2, r3
 8001646:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800164a:	f7ff fccb 	bl	8000fe4 <drawFastHLine>
    return;
 800164e:	e13f      	b.n	80018d0 <fillEllipseHelper+0x2dc>
  }
  if (rx == 0)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d114      	bne.n	8001680 <fillEllipseHelper+0x8c>
  {
    drawFastVLine(x, y - ry, (rx << 2) + 1, color);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	b218      	sxth	r0, r3
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	b29a      	uxth	r2, r3
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b29b      	uxth	r3, r3
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	b29b      	uxth	r3, r3
 8001666:	b219      	sxth	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	b29b      	uxth	r3, r3
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	b29b      	uxth	r3, r3
 8001670:	3301      	adds	r3, #1
 8001672:	b29b      	uxth	r3, r3
 8001674:	b21a      	sxth	r2, r3
 8001676:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800167a:	f7ff fccf 	bl	800101c <drawFastVLine>
    return;
 800167e:	e127      	b.n	80018d0 <fillEllipseHelper+0x2dc>
  }

  int32_t xt, yt, i;
  int32_t rx2 = (int32_t)rx * rx;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	fb03 f303 	mul.w	r3, r3, r3
 8001686:	617b      	str	r3, [r7, #20]
  int32_t ry2 = (int32_t)ry * ry;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	fb03 f303 	mul.w	r3, r3, r3
 800168e:	613b      	str	r3, [r7, #16]
  int32_t s;

  writeFastHLine(x - rx, y, (rx << 1) + 1, color);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	b29a      	uxth	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	b29b      	uxth	r3, r3
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	b29b      	uxth	r3, r3
 800169c:	b218      	sxth	r0, r3
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	b219      	sxth	r1, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	3301      	adds	r3, #1
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016b4:	f7ff ff46 	bl	8001544 <writeFastHLine>
  i = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
  yt = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
  xt = rx;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  s = (rx2 << 1) + ry2 * (1 - (rx << 1));
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	005a      	lsls	r2, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	f1c3 0301 	rsb	r3, r3, #1
 80016d0:	6939      	ldr	r1, [r7, #16]
 80016d2:	fb01 f303 	mul.w	r3, r1, r3
 80016d6:	4413      	add	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
  do
  {
    while (s < 0)
 80016da:	e00b      	b.n	80016f4 <fillEllipseHelper+0x100>
    {
      s += rx2 * ((++yt << 2) + 2);
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	3301      	adds	r3, #1
 80016e0:	623b      	str	r3, [r7, #32]
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	3302      	adds	r3, #2
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	fb02 f303 	mul.w	r3, r2, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4413      	add	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
    while (s < 0)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	dbf0      	blt.n	80016dc <fillEllipseHelper+0xe8>
    }
    if (corners & 1)
 80016fa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d025      	beq.n	8001752 <fillEllipseHelper+0x15e>
    {
      writeFillRect(x - xt, y - yt, (xt << 1) + 1 + delta, yt - i, color);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	b29a      	uxth	r2, r3
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	b29b      	uxth	r3, r3
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	b29b      	uxth	r3, r3
 8001712:	b218      	sxth	r0, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	b29a      	uxth	r2, r3
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	b29b      	uxth	r3, r3
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	b29b      	uxth	r3, r3
 8001720:	b219      	sxth	r1, r3
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	b29b      	uxth	r3, r3
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	b29a      	uxth	r2, r3
 800172a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800172c:	4413      	add	r3, r2
 800172e:	b29b      	uxth	r3, r3
 8001730:	3301      	adds	r3, #1
 8001732:	b29b      	uxth	r3, r3
 8001734:	b21c      	sxth	r4, r3
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	b29a      	uxth	r2, r3
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	b29b      	uxth	r3, r3
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	b29b      	uxth	r3, r3
 8001742:	b21a      	sxth	r2, r3
 8001744:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	4613      	mov	r3, r2
 800174c:	4622      	mov	r2, r4
 800174e:	f7ff fe6d 	bl	800142c <writeFillRect>
    }
    if (corners & 2)
 8001752:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d027      	beq.n	80017ae <fillEllipseHelper+0x1ba>
    {
      writeFillRect(x - xt, y + i + 1, (xt << 1) + 1 + delta, yt - i, color);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	b29a      	uxth	r2, r3
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	b29b      	uxth	r3, r3
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	b29b      	uxth	r3, r3
 800176a:	b218      	sxth	r0, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	b29a      	uxth	r2, r3
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	b29b      	uxth	r3, r3
 8001774:	4413      	add	r3, r2
 8001776:	b29b      	uxth	r3, r3
 8001778:	3301      	adds	r3, #1
 800177a:	b29b      	uxth	r3, r3
 800177c:	b219      	sxth	r1, r3
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	b29b      	uxth	r3, r3
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	b29a      	uxth	r2, r3
 8001786:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001788:	4413      	add	r3, r2
 800178a:	b29b      	uxth	r3, r3
 800178c:	3301      	adds	r3, #1
 800178e:	b29b      	uxth	r3, r3
 8001790:	b21c      	sxth	r4, r3
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	b29a      	uxth	r2, r3
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	b29b      	uxth	r3, r3
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	b29b      	uxth	r3, r3
 800179e:	b21a      	sxth	r2, r3
 80017a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	4613      	mov	r3, r2
 80017a8:	4622      	mov	r2, r4
 80017aa:	f7ff fe3f 	bl	800142c <writeFillRect>
    }
    i = yt;
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	61fb      	str	r3, [r7, #28]
    s -= (--xt) * ry2 << 2;
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	3b01      	subs	r3, #1
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	fb02 f303 	mul.w	r3, r2, r3
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	61bb      	str	r3, [r7, #24]
  } while (rx2 * yt <= ry2 * xt);
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	6a3a      	ldr	r2, [r7, #32]
 80017cc:	fb03 f202 	mul.w	r2, r3, r2
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017d4:	fb01 f303 	mul.w	r3, r1, r3
 80017d8:	429a      	cmp	r2, r3
 80017da:	dd8b      	ble.n	80016f4 <fillEllipseHelper+0x100>

  xt = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  yt = ry;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	623b      	str	r3, [r7, #32]
  s = (ry2 << 1) + rx2 * (1 - (ry << 1));
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	005a      	lsls	r2, r3, #1
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	f1c3 0301 	rsb	r3, r3, #1
 80017f0:	6979      	ldr	r1, [r7, #20]
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
  do
  {
    while (s < 0)
 80017fa:	e00b      	b.n	8001814 <fillEllipseHelper+0x220>
    {
      s += ry2 * ((++xt << 2) + 2);
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	3301      	adds	r3, #1
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	fb02 f303 	mul.w	r3, r2, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4413      	add	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
    while (s < 0)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2b00      	cmp	r3, #0
 8001818:	dbf0      	blt.n	80017fc <fillEllipseHelper+0x208>
    }
    if (corners & 1)
 800181a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d01b      	beq.n	800185e <fillEllipseHelper+0x26a>
    {
      writeFastHLine(x - xt, y - yt, (xt << 1) + 1 + delta, color);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	b29a      	uxth	r2, r3
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	b29b      	uxth	r3, r3
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	b29b      	uxth	r3, r3
 8001832:	b218      	sxth	r0, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	b29a      	uxth	r2, r3
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	b29b      	uxth	r3, r3
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	b29b      	uxth	r3, r3
 8001840:	b219      	sxth	r1, r3
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	b29b      	uxth	r3, r3
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	b29a      	uxth	r2, r3
 800184a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800184c:	4413      	add	r3, r2
 800184e:	b29b      	uxth	r3, r3
 8001850:	3301      	adds	r3, #1
 8001852:	b29b      	uxth	r3, r3
 8001854:	b21a      	sxth	r2, r3
 8001856:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800185a:	f7ff fe73 	bl	8001544 <writeFastHLine>
    }
    if (corners & 2)
 800185e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d01b      	beq.n	80018a2 <fillEllipseHelper+0x2ae>
    {
      writeFastHLine(x - xt, y + yt, (xt << 1) + 1 + delta, color);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	b29a      	uxth	r2, r3
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	b29b      	uxth	r3, r3
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	b29b      	uxth	r3, r3
 8001876:	b218      	sxth	r0, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	b29a      	uxth	r2, r3
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	b29b      	uxth	r3, r3
 8001880:	4413      	add	r3, r2
 8001882:	b29b      	uxth	r3, r3
 8001884:	b219      	sxth	r1, r3
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	b29b      	uxth	r3, r3
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	b29a      	uxth	r2, r3
 800188e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001890:	4413      	add	r3, r2
 8001892:	b29b      	uxth	r3, r3
 8001894:	3301      	adds	r3, #1
 8001896:	b29b      	uxth	r3, r3
 8001898:	b21a      	sxth	r2, r3
 800189a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800189e:	f7ff fe51 	bl	8001544 <writeFastHLine>
    }
    s -= (--yt) * rx2 << 2;
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	623b      	str	r3, [r7, #32]
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	61bb      	str	r3, [r7, #24]
  } while (ry2 * xt <= rx2 * yt);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018bc:	fb03 f202 	mul.w	r2, r3, r2
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	6a39      	ldr	r1, [r7, #32]
 80018c4:	fb01 f303 	mul.w	r3, r1, r3
 80018c8:	429a      	cmp	r2, r3
 80018ca:	dda3      	ble.n	8001814 <fillEllipseHelper+0x220>
 80018cc:	e000      	b.n	80018d0 <fillEllipseHelper+0x2dc>
    return;
 80018ce:	bf00      	nop
}
 80018d0:	372c      	adds	r7, #44	; 0x2c
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd90      	pop	{r4, r7, pc}

080018d6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018dc:	f000 fa26 	bl	8001d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e0:	f000 f825 	bl	800192e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e4:	f7fe fdee 	bl	80004c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018e8:	f000 f96a 	bl	8001bc0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80018ec:	f000 f876 	bl	80019dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 80018f0:	f7ff f8f5 	bl	8000ade <ILI9341_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		/* IMAGE EXAMPLE */
		ILI9341_FillScreen(WHITE);
 80018f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018f8:	f7ff fae8 	bl	8000ecc <ILI9341_FillScreen>
		ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 80018fc:	2003      	movs	r0, #3
 80018fe:	f7ff f9f9 	bl	8000cf4 <ILI9341_SetRotation>
		fillRoundRect(10,10,100,100,20,BLUE);
 8001902:	231f      	movs	r3, #31
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2314      	movs	r3, #20
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2364      	movs	r3, #100	; 0x64
 800190c:	2264      	movs	r2, #100	; 0x64
 800190e:	210a      	movs	r1, #10
 8001910:	200a      	movs	r0, #10
 8001912:	f7fe ff40 	bl	8000796 <fillRoundRect>
		drawRoundRect(13,13,94,94,20,WHITE);
 8001916:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	2314      	movs	r3, #20
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	235e      	movs	r3, #94	; 0x5e
 8001922:	225e      	movs	r2, #94	; 0x5e
 8001924:	210d      	movs	r1, #13
 8001926:	200d      	movs	r0, #13
 8001928:	f7fe fe5c 	bl	80005e4 <drawRoundRect>

		while(1);
 800192c:	e7fe      	b.n	800192c <main+0x56>

0800192e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b096      	sub	sp, #88	; 0x58
 8001932:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2244      	movs	r2, #68	; 0x44
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f003 fb84 	bl	800504a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001942:	463b      	mov	r3, r7
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001950:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001954:	f000 fdac 	bl	80024b0 <HAL_PWREx_ControlVoltageScaling>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800195e:	f000 f837 	bl	80019d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001962:	2302      	movs	r3, #2
 8001964:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800196a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800196c:	2310      	movs	r3, #16
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001970:	2302      	movs	r3, #2
 8001972:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001974:	2302      	movs	r3, #2
 8001976:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001978:	2301      	movs	r3, #1
 800197a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800197c:	230a      	movs	r3, #10
 800197e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001980:	2307      	movs	r3, #7
 8001982:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001984:	2302      	movs	r3, #2
 8001986:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001988:	2302      	movs	r3, #2
 800198a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4618      	mov	r0, r3
 8001992:	f000 fde3 	bl	800255c <HAL_RCC_OscConfig>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800199c:	f000 f818 	bl	80019d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a0:	230f      	movs	r3, #15
 80019a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a4:	2303      	movs	r3, #3
 80019a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019b4:	463b      	mov	r3, r7
 80019b6:	2104      	movs	r1, #4
 80019b8:	4618      	mov	r0, r3
 80019ba:	f001 f9ab 	bl	8002d14 <HAL_RCC_ClockConfig>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80019c4:	f000 f804 	bl	80019d0 <Error_Handler>
  }
}
 80019c8:	bf00      	nop
 80019ca:	3758      	adds	r7, #88	; 0x58
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d4:	b672      	cpsid	i
}
 80019d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <Error_Handler+0x8>
	...

080019dc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019e0:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <MX_SPI1_Init+0x74>)
 80019e2:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <MX_SPI1_Init+0x78>)
 80019e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019e6:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <MX_SPI1_Init+0x74>)
 80019e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019ee:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <MX_SPI1_Init+0x74>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <MX_SPI1_Init+0x74>)
 80019f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <MX_SPI1_Init+0x74>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a02:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <MX_SPI1_Init+0x74>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_SPI1_Init+0x74>)
 8001a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <MX_SPI1_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_SPI1_Init+0x74>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <MX_SPI1_Init+0x74>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <MX_SPI1_Init+0x74>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <MX_SPI1_Init+0x74>)
 8001a2a:	2207      	movs	r2, #7
 8001a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <MX_SPI1_Init+0x74>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <MX_SPI1_Init+0x74>)
 8001a36:	2208      	movs	r2, #8
 8001a38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_SPI1_Init+0x74>)
 8001a3c:	f002 f84a 	bl	8003ad4 <HAL_SPI_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a46:	f7ff ffc3 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	2000002c 	.word	0x2000002c
 8001a54:	40013000 	.word	0x40013000

08001a58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1b      	ldr	r2, [pc, #108]	; (8001ae4 <HAL_SPI_MspInit+0x8c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d130      	bne.n	8001adc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <HAL_SPI_MspInit+0x90>)
 8001a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7e:	4a1a      	ldr	r2, [pc, #104]	; (8001ae8 <HAL_SPI_MspInit+0x90>)
 8001a80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a84:	6613      	str	r3, [r2, #96]	; 0x60
 8001a86:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <HAL_SPI_MspInit+0x90>)
 8001a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_SPI_MspInit+0x90>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <HAL_SPI_MspInit+0x90>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_SPI_MspInit+0x90>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001aaa:	23a0      	movs	r3, #160	; 0xa0
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aba:	2305      	movs	r3, #5
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac8:	f000 fb22 	bl	8002110 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2023      	movs	r0, #35	; 0x23
 8001ad2:	f000 faa6 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001ad6:	2023      	movs	r0, #35	; 0x23
 8001ad8:	f000 fabf 	bl	800205a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001adc:	bf00      	nop
 8001ade:	3728      	adds	r7, #40	; 0x28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40013000 	.word	0x40013000
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_MspInit+0x44>)
 8001af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af6:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <HAL_MspInit+0x44>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6613      	str	r3, [r2, #96]	; 0x60
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <HAL_MspInit+0x44>)
 8001b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_MspInit+0x44>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <HAL_MspInit+0x44>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b14:	6593      	str	r3, [r2, #88]	; 0x58
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_MspInit+0x44>)
 8001b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <NMI_Handler+0x4>

08001b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <HardFault_Handler+0x4>

08001b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <MemManage_Handler+0x4>

08001b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <BusFault_Handler+0x4>

08001b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <UsageFault_Handler+0x4>

08001b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b80:	f000 f930 	bl	8001de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <SPI1_IRQHandler+0x10>)
 8001b8e:	f002 fa45 	bl	800401c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	2000002c 	.word	0x2000002c

08001b9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <SystemInit+0x20>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <SystemInit+0x20>)
 8001ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <MX_USART2_UART_Init+0x58>)
 8001bc6:	4a15      	ldr	r2, [pc, #84]	; (8001c1c <MX_USART2_UART_Init+0x5c>)
 8001bc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <MX_USART2_UART_Init+0x58>)
 8001bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_USART2_UART_Init+0x58>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_USART2_UART_Init+0x58>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <MX_USART2_UART_Init+0x58>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_USART2_UART_Init+0x58>)
 8001be6:	220c      	movs	r2, #12
 8001be8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <MX_USART2_UART_Init+0x58>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_USART2_UART_Init+0x58>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <MX_USART2_UART_Init+0x58>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_USART2_UART_Init+0x58>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <MX_USART2_UART_Init+0x58>)
 8001c04:	f002 fd05 	bl	8004612 <HAL_UART_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c0e:	f7ff fedf 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000090 	.word	0x20000090
 8001c1c:	40004400 	.word	0x40004400

08001c20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0ac      	sub	sp, #176	; 0xb0
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	2288      	movs	r2, #136	; 0x88
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 fa02 	bl	800504a <memset>
  if(uartHandle->Instance==USART2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a21      	ldr	r2, [pc, #132]	; (8001cd0 <HAL_UART_MspInit+0xb0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d13b      	bne.n	8001cc8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c50:	2302      	movs	r3, #2
 8001c52:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f001 fa7d 	bl	800315c <HAL_RCCEx_PeriphCLKConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c68:	f7ff feb2 	bl	80019d0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_UART_MspInit+0xb4>)
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c70:	4a18      	ldr	r2, [pc, #96]	; (8001cd4 <HAL_UART_MspInit+0xb4>)
 8001c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c76:	6593      	str	r3, [r2, #88]	; 0x58
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <HAL_UART_MspInit+0xb4>)
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_UART_MspInit+0xb4>)
 8001c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c88:	4a12      	ldr	r2, [pc, #72]	; (8001cd4 <HAL_UART_MspInit+0xb4>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c90:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <HAL_UART_MspInit+0xb4>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c9c:	230c      	movs	r3, #12
 8001c9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cb4:	2307      	movs	r3, #7
 8001cb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc4:	f000 fa24 	bl	8002110 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cc8:	bf00      	nop
 8001cca:	37b0      	adds	r7, #176	; 0xb0
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40004400 	.word	0x40004400
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cdc:	f7ff ff5e 	bl	8001b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ce0:	480c      	ldr	r0, [pc, #48]	; (8001d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ce2:	490d      	ldr	r1, [pc, #52]	; (8001d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ce4:	4a0d      	ldr	r2, [pc, #52]	; (8001d1c <LoopForever+0xe>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce8:	e002      	b.n	8001cf0 <LoopCopyDataInit>

08001cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cee:	3304      	adds	r3, #4

08001cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf4:	d3f9      	bcc.n	8001cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cf8:	4c0a      	ldr	r4, [pc, #40]	; (8001d24 <LoopForever+0x16>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cfc:	e001      	b.n	8001d02 <LoopFillZerobss>

08001cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d00:	3204      	adds	r2, #4

08001d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d04:	d3fb      	bcc.n	8001cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d06:	f003 f9a9 	bl	800505c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d0a:	f7ff fde4 	bl	80018d6 <main>

08001d0e <LoopForever>:

LoopForever:
    b LoopForever
 8001d0e:	e7fe      	b.n	8001d0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d18:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001d1c:	08005114 	.word	0x08005114
  ldr r2, =_sbss
 8001d20:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001d24:	2000011c 	.word	0x2000011c

08001d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d28:	e7fe      	b.n	8001d28 <ADC1_2_IRQHandler>
	...

08001d2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d36:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <HAL_Init+0x3c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <HAL_Init+0x3c>)
 8001d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d42:	2003      	movs	r0, #3
 8001d44:	f000 f962 	bl	800200c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f000 f80f 	bl	8001d6c <HAL_InitTick>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	71fb      	strb	r3, [r7, #7]
 8001d58:	e001      	b.n	8001d5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d5a:	f7ff fec7 	bl	8001aec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40022000 	.word	0x40022000

08001d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d78:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <HAL_InitTick+0x6c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d023      	beq.n	8001dc8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <HAL_InitTick+0x70>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <HAL_InitTick+0x6c>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 f96d 	bl	8002076 <HAL_SYSTICK_Config>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10f      	bne.n	8001dc2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b0f      	cmp	r3, #15
 8001da6:	d809      	bhi.n	8001dbc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da8:	2200      	movs	r2, #0
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f000 f937 	bl	8002022 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001db4:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <HAL_InitTick+0x74>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e007      	b.n	8001dcc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	e004      	b.n	8001dcc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	e001      	b.n	8001dcc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	2000000c 	.word	0x2000000c
 8001ddc:	20000004 	.word	0x20000004
 8001de0:	20000008 	.word	0x20000008

08001de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_IncTick+0x20>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_IncTick+0x24>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_IncTick+0x24>)
 8001df6:	6013      	str	r3, [r2, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	2000000c 	.word	0x2000000c
 8001e08:	20000118 	.word	0x20000118

08001e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <HAL_GetTick+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000118 	.word	0x20000118

08001e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff ffee 	bl	8001e0c <HAL_GetTick>
 8001e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d005      	beq.n	8001e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_Delay+0x44>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e4a:	bf00      	nop
 8001e4c:	f7ff ffde 	bl	8001e0c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d8f7      	bhi.n	8001e4c <HAL_Delay+0x28>
  {
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000000c 	.word	0x2000000c

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	db0b      	blt.n	8001efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	f003 021f 	and.w	r2, r3, #31
 8001ee8:	4907      	ldr	r1, [pc, #28]	; (8001f08 <__NVIC_EnableIRQ+0x38>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e100 	.word	0xe000e100

08001f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	db0a      	blt.n	8001f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	490c      	ldr	r1, [pc, #48]	; (8001f58 <__NVIC_SetPriority+0x4c>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f34:	e00a      	b.n	8001f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4908      	ldr	r1, [pc, #32]	; (8001f5c <__NVIC_SetPriority+0x50>)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3b04      	subs	r3, #4
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	761a      	strb	r2, [r3, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f1c3 0307 	rsb	r3, r3, #7
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf28      	it	cs
 8001f7e:	2304      	movcs	r3, #4
 8001f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d902      	bls.n	8001f90 <NVIC_EncodePriority+0x30>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3b03      	subs	r3, #3
 8001f8e:	e000      	b.n	8001f92 <NVIC_EncodePriority+0x32>
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	4313      	orrs	r3, r2
         );
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	; 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd8:	d301      	bcc.n	8001fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00f      	b.n	8001ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <SysTick_Config+0x40>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f7ff ff8e 	bl	8001f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <SysTick_Config+0x40>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <SysTick_Config+0x40>)
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	e000e010 	.word	0xe000e010

0800200c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff29 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002034:	f7ff ff3e 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8002038:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f7ff ff8e 	bl	8001f60 <NVIC_EncodePriority>
 8002044:	4602      	mov	r2, r0
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff5d 	bl	8001f0c <__NVIC_SetPriority>
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff31 	bl	8001ed0 <__NVIC_EnableIRQ>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffa2 	bl	8001fc8 <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d005      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2204      	movs	r2, #4
 80020aa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	e029      	b.n	8002106 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 020e 	bic.w	r2, r2, #14
 80020c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f003 021c 	and.w	r2, r3, #28
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	2101      	movs	r1, #1
 80020e0:	fa01 f202 	lsl.w	r2, r1, r2
 80020e4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	4798      	blx	r3
    }
  }
  return status;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211e:	e17f      	b.n	8002420 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2101      	movs	r1, #1
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	4013      	ands	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8171 	beq.w	800241a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d005      	beq.n	8002150 <HAL_GPIO_Init+0x40>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d130      	bne.n	80021b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002186:	2201      	movs	r2, #1
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4013      	ands	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f003 0201 	and.w	r2, r3, #1
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d118      	bne.n	80021f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021c4:	2201      	movs	r2, #1
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4013      	ands	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	08db      	lsrs	r3, r3, #3
 80021da:	f003 0201 	and.w	r2, r3, #1
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d017      	beq.n	800222c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d123      	bne.n	8002280 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	08da      	lsrs	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3208      	adds	r2, #8
 8002240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002244:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	220f      	movs	r2, #15
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	08da      	lsrs	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3208      	adds	r2, #8
 800227a:	6939      	ldr	r1, [r7, #16]
 800227c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0203 	and.w	r2, r3, #3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80ac 	beq.w	800241a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c2:	4b5f      	ldr	r3, [pc, #380]	; (8002440 <HAL_GPIO_Init+0x330>)
 80022c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c6:	4a5e      	ldr	r2, [pc, #376]	; (8002440 <HAL_GPIO_Init+0x330>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6613      	str	r3, [r2, #96]	; 0x60
 80022ce:	4b5c      	ldr	r3, [pc, #368]	; (8002440 <HAL_GPIO_Init+0x330>)
 80022d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022da:	4a5a      	ldr	r2, [pc, #360]	; (8002444 <HAL_GPIO_Init+0x334>)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3302      	adds	r3, #2
 80022e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	220f      	movs	r2, #15
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4013      	ands	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002304:	d025      	beq.n	8002352 <HAL_GPIO_Init+0x242>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4f      	ldr	r2, [pc, #316]	; (8002448 <HAL_GPIO_Init+0x338>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d01f      	beq.n	800234e <HAL_GPIO_Init+0x23e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4e      	ldr	r2, [pc, #312]	; (800244c <HAL_GPIO_Init+0x33c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d019      	beq.n	800234a <HAL_GPIO_Init+0x23a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4d      	ldr	r2, [pc, #308]	; (8002450 <HAL_GPIO_Init+0x340>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_GPIO_Init+0x236>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4c      	ldr	r2, [pc, #304]	; (8002454 <HAL_GPIO_Init+0x344>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00d      	beq.n	8002342 <HAL_GPIO_Init+0x232>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4b      	ldr	r2, [pc, #300]	; (8002458 <HAL_GPIO_Init+0x348>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d007      	beq.n	800233e <HAL_GPIO_Init+0x22e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4a      	ldr	r2, [pc, #296]	; (800245c <HAL_GPIO_Init+0x34c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d101      	bne.n	800233a <HAL_GPIO_Init+0x22a>
 8002336:	2306      	movs	r3, #6
 8002338:	e00c      	b.n	8002354 <HAL_GPIO_Init+0x244>
 800233a:	2307      	movs	r3, #7
 800233c:	e00a      	b.n	8002354 <HAL_GPIO_Init+0x244>
 800233e:	2305      	movs	r3, #5
 8002340:	e008      	b.n	8002354 <HAL_GPIO_Init+0x244>
 8002342:	2304      	movs	r3, #4
 8002344:	e006      	b.n	8002354 <HAL_GPIO_Init+0x244>
 8002346:	2303      	movs	r3, #3
 8002348:	e004      	b.n	8002354 <HAL_GPIO_Init+0x244>
 800234a:	2302      	movs	r3, #2
 800234c:	e002      	b.n	8002354 <HAL_GPIO_Init+0x244>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_GPIO_Init+0x244>
 8002352:	2300      	movs	r3, #0
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	f002 0203 	and.w	r2, r2, #3
 800235a:	0092      	lsls	r2, r2, #2
 800235c:	4093      	lsls	r3, r2
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002364:	4937      	ldr	r1, [pc, #220]	; (8002444 <HAL_GPIO_Init+0x334>)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	3302      	adds	r3, #2
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002372:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <HAL_GPIO_Init+0x350>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002396:	4a32      	ldr	r2, [pc, #200]	; (8002460 <HAL_GPIO_Init+0x350>)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800239c:	4b30      	ldr	r3, [pc, #192]	; (8002460 <HAL_GPIO_Init+0x350>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023c0:	4a27      	ldr	r2, [pc, #156]	; (8002460 <HAL_GPIO_Init+0x350>)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <HAL_GPIO_Init+0x350>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023ea:	4a1d      	ldr	r2, [pc, #116]	; (8002460 <HAL_GPIO_Init+0x350>)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_GPIO_Init+0x350>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002414:	4a12      	ldr	r2, [pc, #72]	; (8002460 <HAL_GPIO_Init+0x350>)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	3301      	adds	r3, #1
 800241e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	f47f ae78 	bne.w	8002120 <HAL_GPIO_Init+0x10>
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	371c      	adds	r7, #28
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	40010000 	.word	0x40010000
 8002448:	48000400 	.word	0x48000400
 800244c:	48000800 	.word	0x48000800
 8002450:	48000c00 	.word	0x48000c00
 8002454:	48001000 	.word	0x48001000
 8002458:	48001400 	.word	0x48001400
 800245c:	48001800 	.word	0x48001800
 8002460:	40010400 	.word	0x40010400

08002464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]
 8002470:	4613      	mov	r3, r2
 8002472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002474:	787b      	ldrb	r3, [r7, #1]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800247a:	887a      	ldrh	r2, [r7, #2]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002480:	e002      	b.n	8002488 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <HAL_PWREx_GetVoltageRange+0x18>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40007000 	.word	0x40007000

080024b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024be:	d130      	bne.n	8002522 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024c0:	4b23      	ldr	r3, [pc, #140]	; (8002550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024cc:	d038      	beq.n	8002540 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024d6:	4a1e      	ldr	r2, [pc, #120]	; (8002550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2232      	movs	r2, #50	; 0x32
 80024e4:	fb02 f303 	mul.w	r3, r2, r3
 80024e8:	4a1b      	ldr	r2, [pc, #108]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0c9b      	lsrs	r3, r3, #18
 80024f0:	3301      	adds	r3, #1
 80024f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024f4:	e002      	b.n	80024fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002508:	d102      	bne.n	8002510 <HAL_PWREx_ControlVoltageScaling+0x60>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f2      	bne.n	80024f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800251c:	d110      	bne.n	8002540 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e00f      	b.n	8002542 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002522:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800252a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800252e:	d007      	beq.n	8002540 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002530:	4b07      	ldr	r3, [pc, #28]	; (8002550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002538:	4a05      	ldr	r2, [pc, #20]	; (8002550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800253a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800253e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40007000 	.word	0x40007000
 8002554:	20000004 	.word	0x20000004
 8002558:	431bde83 	.word	0x431bde83

0800255c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e3ca      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800256e:	4b97      	ldr	r3, [pc, #604]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002578:	4b94      	ldr	r3, [pc, #592]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 80e4 	beq.w	8002758 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d007      	beq.n	80025a6 <HAL_RCC_OscConfig+0x4a>
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	2b0c      	cmp	r3, #12
 800259a:	f040 808b 	bne.w	80026b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	f040 8087 	bne.w	80026b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025a6:	4b89      	ldr	r3, [pc, #548]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_RCC_OscConfig+0x62>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e3a2      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1a      	ldr	r2, [r3, #32]
 80025c2:	4b82      	ldr	r3, [pc, #520]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d004      	beq.n	80025d8 <HAL_RCC_OscConfig+0x7c>
 80025ce:	4b7f      	ldr	r3, [pc, #508]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025d6:	e005      	b.n	80025e4 <HAL_RCC_OscConfig+0x88>
 80025d8:	4b7c      	ldr	r3, [pc, #496]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 80025da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d223      	bcs.n	8002630 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 fd55 	bl	800309c <RCC_SetFlashLatencyFromMSIRange>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e383      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025fc:	4b73      	ldr	r3, [pc, #460]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a72      	ldr	r2, [pc, #456]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 8002602:	f043 0308 	orr.w	r3, r3, #8
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	4b70      	ldr	r3, [pc, #448]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	496d      	ldr	r1, [pc, #436]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800261a:	4b6c      	ldr	r3, [pc, #432]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	4968      	ldr	r1, [pc, #416]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
 800262e:	e025      	b.n	800267c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002630:	4b66      	ldr	r3, [pc, #408]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a65      	ldr	r2, [pc, #404]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 8002636:	f043 0308 	orr.w	r3, r3, #8
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	4b63      	ldr	r3, [pc, #396]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4960      	ldr	r1, [pc, #384]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800264e:	4b5f      	ldr	r3, [pc, #380]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	021b      	lsls	r3, r3, #8
 800265c:	495b      	ldr	r1, [pc, #364]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d109      	bne.n	800267c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	4618      	mov	r0, r3
 800266e:	f000 fd15 	bl	800309c <RCC_SetFlashLatencyFromMSIRange>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e343      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800267c:	f000 fc4a 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 8002680:	4602      	mov	r2, r0
 8002682:	4b52      	ldr	r3, [pc, #328]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	091b      	lsrs	r3, r3, #4
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	4950      	ldr	r1, [pc, #320]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
 8002698:	4a4e      	ldr	r2, [pc, #312]	; (80027d4 <HAL_RCC_OscConfig+0x278>)
 800269a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800269c:	4b4e      	ldr	r3, [pc, #312]	; (80027d8 <HAL_RCC_OscConfig+0x27c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fb63 	bl	8001d6c <HAL_InitTick>
 80026a6:	4603      	mov	r3, r0
 80026a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d052      	beq.n	8002756 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	e327      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d032      	beq.n	8002722 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026bc:	4b43      	ldr	r3, [pc, #268]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a42      	ldr	r2, [pc, #264]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026c8:	f7ff fba0 	bl	8001e0c <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026d0:	f7ff fb9c 	bl	8001e0c <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e310      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026e2:	4b3a      	ldr	r3, [pc, #232]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026ee:	4b37      	ldr	r3, [pc, #220]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a36      	ldr	r2, [pc, #216]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 80026f4:	f043 0308 	orr.w	r3, r3, #8
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b34      	ldr	r3, [pc, #208]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4931      	ldr	r1, [pc, #196]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 8002708:	4313      	orrs	r3, r2
 800270a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800270c:	4b2f      	ldr	r3, [pc, #188]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	492c      	ldr	r1, [pc, #176]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
 8002720:	e01a      	b.n	8002758 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002722:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a29      	ldr	r2, [pc, #164]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800272e:	f7ff fb6d 	bl	8001e0c <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002736:	f7ff fb69 	bl	8001e0c <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e2dd      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002748:	4b20      	ldr	r3, [pc, #128]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f0      	bne.n	8002736 <HAL_RCC_OscConfig+0x1da>
 8002754:	e000      	b.n	8002758 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002756:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d074      	beq.n	800284e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2b08      	cmp	r3, #8
 8002768:	d005      	beq.n	8002776 <HAL_RCC_OscConfig+0x21a>
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	2b0c      	cmp	r3, #12
 800276e:	d10e      	bne.n	800278e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	2b03      	cmp	r3, #3
 8002774:	d10b      	bne.n	800278e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d064      	beq.n	800284c <HAL_RCC_OscConfig+0x2f0>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d160      	bne.n	800284c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e2ba      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002796:	d106      	bne.n	80027a6 <HAL_RCC_OscConfig+0x24a>
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 800279e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	e026      	b.n	80027f4 <HAL_RCC_OscConfig+0x298>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027ae:	d115      	bne.n	80027dc <HAL_RCC_OscConfig+0x280>
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a05      	ldr	r2, [pc, #20]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 80027b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	4b03      	ldr	r3, [pc, #12]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a02      	ldr	r2, [pc, #8]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 80027c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	e014      	b.n	80027f4 <HAL_RCC_OscConfig+0x298>
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	080050bc 	.word	0x080050bc
 80027d4:	20000004 	.word	0x20000004
 80027d8:	20000008 	.word	0x20000008
 80027dc:	4ba0      	ldr	r3, [pc, #640]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a9f      	ldr	r2, [pc, #636]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 80027e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	4b9d      	ldr	r3, [pc, #628]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a9c      	ldr	r2, [pc, #624]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 80027ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d013      	beq.n	8002824 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7ff fb06 	bl	8001e0c <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002804:	f7ff fb02 	bl	8001e0c <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b64      	cmp	r3, #100	; 0x64
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e276      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002816:	4b92      	ldr	r3, [pc, #584]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x2a8>
 8002822:	e014      	b.n	800284e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7ff faf2 	bl	8001e0c <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800282c:	f7ff faee 	bl	8001e0c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e262      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800283e:	4b88      	ldr	r3, [pc, #544]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x2d0>
 800284a:	e000      	b.n	800284e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d060      	beq.n	800291c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	2b04      	cmp	r3, #4
 800285e:	d005      	beq.n	800286c <HAL_RCC_OscConfig+0x310>
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	2b0c      	cmp	r3, #12
 8002864:	d119      	bne.n	800289a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d116      	bne.n	800289a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800286c:	4b7c      	ldr	r3, [pc, #496]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_OscConfig+0x328>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e23f      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002884:	4b76      	ldr	r3, [pc, #472]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	061b      	lsls	r3, r3, #24
 8002892:	4973      	ldr	r1, [pc, #460]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002898:	e040      	b.n	800291c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d023      	beq.n	80028ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a2:	4b6f      	ldr	r3, [pc, #444]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a6e      	ldr	r2, [pc, #440]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 80028a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ae:	f7ff faad 	bl	8001e0c <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b6:	f7ff faa9 	bl	8001e0c <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e21d      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c8:	4b65      	ldr	r3, [pc, #404]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d4:	4b62      	ldr	r3, [pc, #392]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	061b      	lsls	r3, r3, #24
 80028e2:	495f      	ldr	r1, [pc, #380]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
 80028e8:	e018      	b.n	800291c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ea:	4b5d      	ldr	r3, [pc, #372]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a5c      	ldr	r2, [pc, #368]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 80028f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7ff fa89 	bl	8001e0c <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028fe:	f7ff fa85 	bl	8001e0c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e1f9      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002910:	4b53      	ldr	r3, [pc, #332]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f0      	bne.n	80028fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b00      	cmp	r3, #0
 8002926:	d03c      	beq.n	80029a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01c      	beq.n	800296a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002930:	4b4b      	ldr	r3, [pc, #300]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002936:	4a4a      	ldr	r2, [pc, #296]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002940:	f7ff fa64 	bl	8001e0c <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002948:	f7ff fa60 	bl	8001e0c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e1d4      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800295a:	4b41      	ldr	r3, [pc, #260]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 800295c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0ef      	beq.n	8002948 <HAL_RCC_OscConfig+0x3ec>
 8002968:	e01b      	b.n	80029a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800296a:	4b3d      	ldr	r3, [pc, #244]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 800296c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002970:	4a3b      	ldr	r2, [pc, #236]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002972:	f023 0301 	bic.w	r3, r3, #1
 8002976:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297a:	f7ff fa47 	bl	8001e0c <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002982:	f7ff fa43 	bl	8001e0c <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e1b7      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002994:	4b32      	ldr	r3, [pc, #200]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1ef      	bne.n	8002982 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 80a6 	beq.w	8002afc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029b0:	2300      	movs	r3, #0
 80029b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029b4:	4b2a      	ldr	r3, [pc, #168]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 80029b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10d      	bne.n	80029dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c0:	4b27      	ldr	r3, [pc, #156]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 80029c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c4:	4a26      	ldr	r2, [pc, #152]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 80029c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ca:	6593      	str	r3, [r2, #88]	; 0x58
 80029cc:	4b24      	ldr	r3, [pc, #144]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 80029ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d8:	2301      	movs	r3, #1
 80029da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029dc:	4b21      	ldr	r3, [pc, #132]	; (8002a64 <HAL_RCC_OscConfig+0x508>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d118      	bne.n	8002a1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e8:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <HAL_RCC_OscConfig+0x508>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1d      	ldr	r2, [pc, #116]	; (8002a64 <HAL_RCC_OscConfig+0x508>)
 80029ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f4:	f7ff fa0a 	bl	8001e0c <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fc:	f7ff fa06 	bl	8001e0c <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e17a      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <HAL_RCC_OscConfig+0x508>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d108      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4d8>
 8002a22:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a28:	4a0d      	ldr	r2, [pc, #52]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a32:	e029      	b.n	8002a88 <HAL_RCC_OscConfig+0x52c>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b05      	cmp	r3, #5
 8002a3a:	d115      	bne.n	8002a68 <HAL_RCC_OscConfig+0x50c>
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	4a07      	ldr	r2, [pc, #28]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002a44:	f043 0304 	orr.w	r3, r3, #4
 8002a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a4c:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a52:	4a03      	ldr	r2, [pc, #12]	; (8002a60 <HAL_RCC_OscConfig+0x504>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a5c:	e014      	b.n	8002a88 <HAL_RCC_OscConfig+0x52c>
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40007000 	.word	0x40007000
 8002a68:	4b9c      	ldr	r3, [pc, #624]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6e:	4a9b      	ldr	r2, [pc, #620]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a78:	4b98      	ldr	r3, [pc, #608]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7e:	4a97      	ldr	r2, [pc, #604]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002a80:	f023 0304 	bic.w	r3, r3, #4
 8002a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d016      	beq.n	8002abe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7ff f9bc 	bl	8001e0c <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a98:	f7ff f9b8 	bl	8001e0c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e12a      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aae:	4b8b      	ldr	r3, [pc, #556]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0ed      	beq.n	8002a98 <HAL_RCC_OscConfig+0x53c>
 8002abc:	e015      	b.n	8002aea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abe:	f7ff f9a5 	bl	8001e0c <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7ff f9a1 	bl	8001e0c <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e113      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002adc:	4b7f      	ldr	r3, [pc, #508]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1ed      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aea:	7ffb      	ldrb	r3, [r7, #31]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d105      	bne.n	8002afc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af0:	4b7a      	ldr	r3, [pc, #488]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	4a79      	ldr	r2, [pc, #484]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80fe 	beq.w	8002d02 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	f040 80d0 	bne.w	8002cb0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b10:	4b72      	ldr	r3, [pc, #456]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f003 0203 	and.w	r2, r3, #3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d130      	bne.n	8002b86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d127      	bne.n	8002b86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b40:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d11f      	bne.n	8002b86 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b50:	2a07      	cmp	r2, #7
 8002b52:	bf14      	ite	ne
 8002b54:	2201      	movne	r2, #1
 8002b56:	2200      	moveq	r2, #0
 8002b58:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d113      	bne.n	8002b86 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	085b      	lsrs	r3, r3, #1
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d109      	bne.n	8002b86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	085b      	lsrs	r3, r3, #1
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d06e      	beq.n	8002c64 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2b0c      	cmp	r3, #12
 8002b8a:	d069      	beq.n	8002c60 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b8c:	4b53      	ldr	r3, [pc, #332]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d105      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b98:	4b50      	ldr	r3, [pc, #320]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0ad      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ba8:	4b4c      	ldr	r3, [pc, #304]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a4b      	ldr	r2, [pc, #300]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bb4:	f7ff f92a 	bl	8001e0c <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7ff f926 	bl	8001e0c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e09a      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bce:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bda:	4b40      	ldr	r3, [pc, #256]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	4b40      	ldr	r3, [pc, #256]	; (8002ce0 <HAL_RCC_OscConfig+0x784>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bea:	3a01      	subs	r2, #1
 8002bec:	0112      	lsls	r2, r2, #4
 8002bee:	4311      	orrs	r1, r2
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bf4:	0212      	lsls	r2, r2, #8
 8002bf6:	4311      	orrs	r1, r2
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bfc:	0852      	lsrs	r2, r2, #1
 8002bfe:	3a01      	subs	r2, #1
 8002c00:	0552      	lsls	r2, r2, #21
 8002c02:	4311      	orrs	r1, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c08:	0852      	lsrs	r2, r2, #1
 8002c0a:	3a01      	subs	r2, #1
 8002c0c:	0652      	lsls	r2, r2, #25
 8002c0e:	4311      	orrs	r1, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c14:	0912      	lsrs	r2, r2, #4
 8002c16:	0452      	lsls	r2, r2, #17
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	4930      	ldr	r1, [pc, #192]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c20:	4b2e      	ldr	r3, [pc, #184]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a2d      	ldr	r2, [pc, #180]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c2c:	4b2b      	ldr	r3, [pc, #172]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4a2a      	ldr	r2, [pc, #168]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c38:	f7ff f8e8 	bl	8001e0c <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c40:	f7ff f8e4 	bl	8001e0c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e058      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c52:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c5e:	e050      	b.n	8002d02 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e04f      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c64:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d148      	bne.n	8002d02 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c70:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a19      	ldr	r2, [pc, #100]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c7c:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4a16      	ldr	r2, [pc, #88]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c88:	f7ff f8c0 	bl	8001e0c <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c90:	f7ff f8bc 	bl	8001e0c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e030      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x734>
 8002cae:	e028      	b.n	8002d02 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b0c      	cmp	r3, #12
 8002cb4:	d023      	beq.n	8002cfe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb6:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a08      	ldr	r2, [pc, #32]	; (8002cdc <HAL_RCC_OscConfig+0x780>)
 8002cbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc2:	f7ff f8a3 	bl	8001e0c <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc8:	e00c      	b.n	8002ce4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cca:	f7ff f89f 	bl	8001e0c <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d905      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e013      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce4:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <HAL_RCC_OscConfig+0x7b0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1ec      	bne.n	8002cca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_RCC_OscConfig+0x7b0>)
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	4905      	ldr	r1, [pc, #20]	; (8002d0c <HAL_RCC_OscConfig+0x7b0>)
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_RCC_OscConfig+0x7b4>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60cb      	str	r3, [r1, #12]
 8002cfc:	e001      	b.n	8002d02 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3720      	adds	r7, #32
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	feeefffc 	.word	0xfeeefffc

08002d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0e7      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d28:	4b75      	ldr	r3, [pc, #468]	; (8002f00 <HAL_RCC_ClockConfig+0x1ec>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d910      	bls.n	8002d58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d36:	4b72      	ldr	r3, [pc, #456]	; (8002f00 <HAL_RCC_ClockConfig+0x1ec>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f023 0207 	bic.w	r2, r3, #7
 8002d3e:	4970      	ldr	r1, [pc, #448]	; (8002f00 <HAL_RCC_ClockConfig+0x1ec>)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d46:	4b6e      	ldr	r3, [pc, #440]	; (8002f00 <HAL_RCC_ClockConfig+0x1ec>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0cf      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d010      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	4b66      	ldr	r3, [pc, #408]	; (8002f04 <HAL_RCC_ClockConfig+0x1f0>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d908      	bls.n	8002d86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d74:	4b63      	ldr	r3, [pc, #396]	; (8002f04 <HAL_RCC_ClockConfig+0x1f0>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	4960      	ldr	r1, [pc, #384]	; (8002f04 <HAL_RCC_ClockConfig+0x1f0>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d04c      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d9a:	4b5a      	ldr	r3, [pc, #360]	; (8002f04 <HAL_RCC_ClockConfig+0x1f0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d121      	bne.n	8002dea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e0a6      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002db2:	4b54      	ldr	r3, [pc, #336]	; (8002f04 <HAL_RCC_ClockConfig+0x1f0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d115      	bne.n	8002dea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e09a      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dca:	4b4e      	ldr	r3, [pc, #312]	; (8002f04 <HAL_RCC_ClockConfig+0x1f0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d109      	bne.n	8002dea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e08e      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dda:	4b4a      	ldr	r3, [pc, #296]	; (8002f04 <HAL_RCC_ClockConfig+0x1f0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e086      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dea:	4b46      	ldr	r3, [pc, #280]	; (8002f04 <HAL_RCC_ClockConfig+0x1f0>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f023 0203 	bic.w	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4943      	ldr	r1, [pc, #268]	; (8002f04 <HAL_RCC_ClockConfig+0x1f0>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dfc:	f7ff f806 	bl	8001e0c <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	e00a      	b.n	8002e1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e04:	f7ff f802 	bl	8001e0c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e06e      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1a:	4b3a      	ldr	r3, [pc, #232]	; (8002f04 <HAL_RCC_ClockConfig+0x1f0>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 020c 	and.w	r2, r3, #12
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d1eb      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d010      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	4b31      	ldr	r3, [pc, #196]	; (8002f04 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d208      	bcs.n	8002e5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e48:	4b2e      	ldr	r3, [pc, #184]	; (8002f04 <HAL_RCC_ClockConfig+0x1f0>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	492b      	ldr	r1, [pc, #172]	; (8002f04 <HAL_RCC_ClockConfig+0x1f0>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e5a:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <HAL_RCC_ClockConfig+0x1ec>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d210      	bcs.n	8002e8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e68:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <HAL_RCC_ClockConfig+0x1ec>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f023 0207 	bic.w	r2, r3, #7
 8002e70:	4923      	ldr	r1, [pc, #140]	; (8002f00 <HAL_RCC_ClockConfig+0x1ec>)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e78:	4b21      	ldr	r3, [pc, #132]	; (8002f00 <HAL_RCC_ClockConfig+0x1ec>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e036      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d008      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e96:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_RCC_ClockConfig+0x1f0>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	4918      	ldr	r1, [pc, #96]	; (8002f04 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d009      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eb4:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4910      	ldr	r1, [pc, #64]	; (8002f04 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ec8:	f000 f824 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	490b      	ldr	r1, [pc, #44]	; (8002f08 <HAL_RCC_ClockConfig+0x1f4>)
 8002eda:	5ccb      	ldrb	r3, [r1, r3]
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee4:	4a09      	ldr	r2, [pc, #36]	; (8002f0c <HAL_RCC_ClockConfig+0x1f8>)
 8002ee6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ee8:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <HAL_RCC_ClockConfig+0x1fc>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe ff3d 	bl	8001d6c <HAL_InitTick>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ef6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40022000 	.word	0x40022000
 8002f04:	40021000 	.word	0x40021000
 8002f08:	080050bc 	.word	0x080050bc
 8002f0c:	20000004 	.word	0x20000004
 8002f10:	20000008 	.word	0x20000008

08002f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f22:	4b3e      	ldr	r3, [pc, #248]	; (800301c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f2c:	4b3b      	ldr	r3, [pc, #236]	; (800301c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0x34>
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	2b0c      	cmp	r3, #12
 8002f40:	d121      	bne.n	8002f86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d11e      	bne.n	8002f86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f48:	4b34      	ldr	r3, [pc, #208]	; (800301c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d107      	bne.n	8002f64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f54:	4b31      	ldr	r3, [pc, #196]	; (800301c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f5a:	0a1b      	lsrs	r3, r3, #8
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	e005      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f64:	4b2d      	ldr	r3, [pc, #180]	; (800301c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f70:	4a2b      	ldr	r2, [pc, #172]	; (8003020 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10d      	bne.n	8002f9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f84:	e00a      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d102      	bne.n	8002f92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f8c:	4b25      	ldr	r3, [pc, #148]	; (8003024 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f8e:	61bb      	str	r3, [r7, #24]
 8002f90:	e004      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d101      	bne.n	8002f9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f98:	4b23      	ldr	r3, [pc, #140]	; (8003028 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b0c      	cmp	r3, #12
 8002fa0:	d134      	bne.n	800300c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fa2:	4b1e      	ldr	r3, [pc, #120]	; (800301c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d003      	beq.n	8002fba <HAL_RCC_GetSysClockFreq+0xa6>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d003      	beq.n	8002fc0 <HAL_RCC_GetSysClockFreq+0xac>
 8002fb8:	e005      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fba:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fbc:	617b      	str	r3, [r7, #20]
      break;
 8002fbe:	e005      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fc0:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fc2:	617b      	str	r3, [r7, #20]
      break;
 8002fc4:	e002      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	617b      	str	r3, [r7, #20]
      break;
 8002fca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fcc:	4b13      	ldr	r3, [pc, #76]	; (800301c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	091b      	lsrs	r3, r3, #4
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	0a1b      	lsrs	r3, r3, #8
 8002fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	fb03 f202 	mul.w	r2, r3, r2
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	0e5b      	lsrs	r3, r3, #25
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	fbb2 f3f3 	udiv	r3, r2, r3
 800300a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800300c:	69bb      	ldr	r3, [r7, #24]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3724      	adds	r7, #36	; 0x24
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40021000 	.word	0x40021000
 8003020:	080050d4 	.word	0x080050d4
 8003024:	00f42400 	.word	0x00f42400
 8003028:	007a1200 	.word	0x007a1200

0800302c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003030:	4b03      	ldr	r3, [pc, #12]	; (8003040 <HAL_RCC_GetHCLKFreq+0x14>)
 8003032:	681b      	ldr	r3, [r3, #0]
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000004 	.word	0x20000004

08003044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003048:	f7ff fff0 	bl	800302c <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4904      	ldr	r1, [pc, #16]	; (800306c <HAL_RCC_GetPCLK1Freq+0x28>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000
 800306c:	080050cc 	.word	0x080050cc

08003070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003074:	f7ff ffda 	bl	800302c <HAL_RCC_GetHCLKFreq>
 8003078:	4602      	mov	r2, r0
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_RCC_GetPCLK2Freq+0x24>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	0adb      	lsrs	r3, r3, #11
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	4904      	ldr	r1, [pc, #16]	; (8003098 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003086:	5ccb      	ldrb	r3, [r1, r3]
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000
 8003098:	080050cc 	.word	0x080050cc

0800309c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030a4:	2300      	movs	r3, #0
 80030a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030a8:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030b4:	f7ff f9ee 	bl	8002494 <HAL_PWREx_GetVoltageRange>
 80030b8:	6178      	str	r0, [r7, #20]
 80030ba:	e014      	b.n	80030e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030bc:	4b25      	ldr	r3, [pc, #148]	; (8003154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	4a24      	ldr	r2, [pc, #144]	; (8003154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c6:	6593      	str	r3, [r2, #88]	; 0x58
 80030c8:	4b22      	ldr	r3, [pc, #136]	; (8003154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030d4:	f7ff f9de 	bl	8002494 <HAL_PWREx_GetVoltageRange>
 80030d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030da:	4b1e      	ldr	r3, [pc, #120]	; (8003154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030de:	4a1d      	ldr	r2, [pc, #116]	; (8003154 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ec:	d10b      	bne.n	8003106 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b80      	cmp	r3, #128	; 0x80
 80030f2:	d919      	bls.n	8003128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2ba0      	cmp	r3, #160	; 0xa0
 80030f8:	d902      	bls.n	8003100 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030fa:	2302      	movs	r3, #2
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	e013      	b.n	8003128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003100:	2301      	movs	r3, #1
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	e010      	b.n	8003128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b80      	cmp	r3, #128	; 0x80
 800310a:	d902      	bls.n	8003112 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800310c:	2303      	movs	r3, #3
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	e00a      	b.n	8003128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b80      	cmp	r3, #128	; 0x80
 8003116:	d102      	bne.n	800311e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003118:	2302      	movs	r3, #2
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	e004      	b.n	8003128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b70      	cmp	r3, #112	; 0x70
 8003122:	d101      	bne.n	8003128 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003124:	2301      	movs	r3, #1
 8003126:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 0207 	bic.w	r2, r3, #7
 8003130:	4909      	ldr	r1, [pc, #36]	; (8003158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003138:	4b07      	ldr	r3, [pc, #28]	; (8003158 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	429a      	cmp	r2, r3
 8003144:	d001      	beq.n	800314a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40021000 	.word	0x40021000
 8003158:	40022000 	.word	0x40022000

0800315c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003164:	2300      	movs	r3, #0
 8003166:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003168:	2300      	movs	r3, #0
 800316a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003174:	2b00      	cmp	r3, #0
 8003176:	d041      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800317c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003180:	d02a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003182:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003186:	d824      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003188:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800318c:	d008      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800318e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003192:	d81e      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800319c:	d010      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800319e:	e018      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031a0:	4b86      	ldr	r3, [pc, #536]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4a85      	ldr	r2, [pc, #532]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031ac:	e015      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3304      	adds	r3, #4
 80031b2:	2100      	movs	r1, #0
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fabb 	bl	8003730 <RCCEx_PLLSAI1_Config>
 80031ba:	4603      	mov	r3, r0
 80031bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031be:	e00c      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3320      	adds	r3, #32
 80031c4:	2100      	movs	r1, #0
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fba6 	bl	8003918 <RCCEx_PLLSAI2_Config>
 80031cc:	4603      	mov	r3, r0
 80031ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031d0:	e003      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	74fb      	strb	r3, [r7, #19]
      break;
 80031d6:	e000      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031da:	7cfb      	ldrb	r3, [r7, #19]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10b      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031e0:	4b76      	ldr	r3, [pc, #472]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ee:	4973      	ldr	r1, [pc, #460]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031f6:	e001      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d041      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800320c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003210:	d02a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003212:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003216:	d824      	bhi.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003218:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800321c:	d008      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800321e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003222:	d81e      	bhi.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800322c:	d010      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800322e:	e018      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003230:	4b62      	ldr	r3, [pc, #392]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4a61      	ldr	r2, [pc, #388]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800323c:	e015      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3304      	adds	r3, #4
 8003242:	2100      	movs	r1, #0
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fa73 	bl	8003730 <RCCEx_PLLSAI1_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800324e:	e00c      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3320      	adds	r3, #32
 8003254:	2100      	movs	r1, #0
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fb5e 	bl	8003918 <RCCEx_PLLSAI2_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003260:	e003      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	74fb      	strb	r3, [r7, #19]
      break;
 8003266:	e000      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800326a:	7cfb      	ldrb	r3, [r7, #19]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10b      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003270:	4b52      	ldr	r3, [pc, #328]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003276:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800327e:	494f      	ldr	r1, [pc, #316]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003286:	e001      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80a0 	beq.w	80033da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800329a:	2300      	movs	r3, #0
 800329c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800329e:	4b47      	ldr	r3, [pc, #284]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80032ae:	2300      	movs	r3, #0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00d      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b4:	4b41      	ldr	r3, [pc, #260]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	4a40      	ldr	r2, [pc, #256]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032be:	6593      	str	r3, [r2, #88]	; 0x58
 80032c0:	4b3e      	ldr	r3, [pc, #248]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032cc:	2301      	movs	r3, #1
 80032ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032d0:	4b3b      	ldr	r3, [pc, #236]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a3a      	ldr	r2, [pc, #232]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032dc:	f7fe fd96 	bl	8001e0c <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032e2:	e009      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e4:	f7fe fd92 	bl	8001e0c <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d902      	bls.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	74fb      	strb	r3, [r7, #19]
        break;
 80032f6:	e005      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032f8:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0ef      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003304:	7cfb      	ldrb	r3, [r7, #19]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d15c      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800330a:	4b2c      	ldr	r3, [pc, #176]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003314:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01f      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	429a      	cmp	r2, r3
 8003326:	d019      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003328:	4b24      	ldr	r3, [pc, #144]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003332:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003334:	4b21      	ldr	r3, [pc, #132]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333a:	4a20      	ldr	r2, [pc, #128]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003344:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334a:	4a1c      	ldr	r2, [pc, #112]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003354:	4a19      	ldr	r2, [pc, #100]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d016      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003366:	f7fe fd51 	bl	8001e0c <HAL_GetTick>
 800336a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800336c:	e00b      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7fe fd4d 	bl	8001e0c <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	; 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d902      	bls.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	74fb      	strb	r3, [r7, #19]
            break;
 8003384:	e006      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003386:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0ec      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003394:	7cfb      	ldrb	r3, [r7, #19]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10c      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033aa:	4904      	ldr	r1, [pc, #16]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033b2:	e009      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033b4:	7cfb      	ldrb	r3, [r7, #19]
 80033b6:	74bb      	strb	r3, [r7, #18]
 80033b8:	e006      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
 80033c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c8:	7c7b      	ldrb	r3, [r7, #17]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d105      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ce:	4b9e      	ldr	r3, [pc, #632]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d2:	4a9d      	ldr	r2, [pc, #628]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033e6:	4b98      	ldr	r3, [pc, #608]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ec:	f023 0203 	bic.w	r2, r3, #3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f4:	4994      	ldr	r1, [pc, #592]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003408:	4b8f      	ldr	r3, [pc, #572]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340e:	f023 020c 	bic.w	r2, r3, #12
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	498c      	ldr	r1, [pc, #560]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800342a:	4b87      	ldr	r3, [pc, #540]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003430:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	4983      	ldr	r1, [pc, #524]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800344c:	4b7e      	ldr	r3, [pc, #504]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003452:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	497b      	ldr	r1, [pc, #492]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800346e:	4b76      	ldr	r3, [pc, #472]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347c:	4972      	ldr	r1, [pc, #456]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003490:	4b6d      	ldr	r3, [pc, #436]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349e:	496a      	ldr	r1, [pc, #424]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034b2:	4b65      	ldr	r3, [pc, #404]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c0:	4961      	ldr	r1, [pc, #388]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034d4:	4b5c      	ldr	r3, [pc, #368]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e2:	4959      	ldr	r1, [pc, #356]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034f6:	4b54      	ldr	r3, [pc, #336]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003504:	4950      	ldr	r1, [pc, #320]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003518:	4b4b      	ldr	r3, [pc, #300]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003526:	4948      	ldr	r1, [pc, #288]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800353a:	4b43      	ldr	r3, [pc, #268]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003540:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	493f      	ldr	r1, [pc, #252]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d028      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800355c:	4b3a      	ldr	r3, [pc, #232]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800356a:	4937      	ldr	r1, [pc, #220]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800357a:	d106      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800357c:	4b32      	ldr	r3, [pc, #200]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4a31      	ldr	r2, [pc, #196]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003586:	60d3      	str	r3, [r2, #12]
 8003588:	e011      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800358e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003592:	d10c      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3304      	adds	r3, #4
 8003598:	2101      	movs	r1, #1
 800359a:	4618      	mov	r0, r3
 800359c:	f000 f8c8 	bl	8003730 <RCCEx_PLLSAI1_Config>
 80035a0:	4603      	mov	r3, r0
 80035a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80035aa:	7cfb      	ldrb	r3, [r7, #19]
 80035ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d028      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035ba:	4b23      	ldr	r3, [pc, #140]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	491f      	ldr	r1, [pc, #124]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035d8:	d106      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035da:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	4a1a      	ldr	r2, [pc, #104]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035e4:	60d3      	str	r3, [r2, #12]
 80035e6:	e011      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035f0:	d10c      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3304      	adds	r3, #4
 80035f6:	2101      	movs	r1, #1
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 f899 	bl	8003730 <RCCEx_PLLSAI1_Config>
 80035fe:	4603      	mov	r3, r0
 8003600:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003602:	7cfb      	ldrb	r3, [r7, #19]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003608:	7cfb      	ldrb	r3, [r7, #19]
 800360a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d02b      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003626:	4908      	ldr	r1, [pc, #32]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003632:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003636:	d109      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003638:	4b03      	ldr	r3, [pc, #12]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a02      	ldr	r2, [pc, #8]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003642:	60d3      	str	r3, [r2, #12]
 8003644:	e014      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003650:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003654:	d10c      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3304      	adds	r3, #4
 800365a:	2101      	movs	r1, #1
 800365c:	4618      	mov	r0, r3
 800365e:	f000 f867 	bl	8003730 <RCCEx_PLLSAI1_Config>
 8003662:	4603      	mov	r3, r0
 8003664:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003666:	7cfb      	ldrb	r3, [r7, #19]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800366c:	7cfb      	ldrb	r3, [r7, #19]
 800366e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d02f      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800367c:	4b2b      	ldr	r3, [pc, #172]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003682:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800368a:	4928      	ldr	r1, [pc, #160]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800369a:	d10d      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3304      	adds	r3, #4
 80036a0:	2102      	movs	r1, #2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f844 	bl	8003730 <RCCEx_PLLSAI1_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ac:	7cfb      	ldrb	r3, [r7, #19]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d014      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036b2:	7cfb      	ldrb	r3, [r7, #19]
 80036b4:	74bb      	strb	r3, [r7, #18]
 80036b6:	e011      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036c0:	d10c      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3320      	adds	r3, #32
 80036c6:	2102      	movs	r1, #2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 f925 	bl	8003918 <RCCEx_PLLSAI2_Config>
 80036ce:	4603      	mov	r3, r0
 80036d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036d2:	7cfb      	ldrb	r3, [r7, #19]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036d8:	7cfb      	ldrb	r3, [r7, #19]
 80036da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036e8:	4b10      	ldr	r3, [pc, #64]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036f6:	490d      	ldr	r1, [pc, #52]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800370a:	4b08      	ldr	r3, [pc, #32]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800370c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003710:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800371a:	4904      	ldr	r1, [pc, #16]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003722:	7cbb      	ldrb	r3, [r7, #18]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40021000 	.word	0x40021000

08003730 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800373e:	4b75      	ldr	r3, [pc, #468]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d018      	beq.n	800377c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800374a:	4b72      	ldr	r3, [pc, #456]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f003 0203 	and.w	r2, r3, #3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d10d      	bne.n	8003776 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
       ||
 800375e:	2b00      	cmp	r3, #0
 8003760:	d009      	beq.n	8003776 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003762:	4b6c      	ldr	r3, [pc, #432]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	091b      	lsrs	r3, r3, #4
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
       ||
 8003772:	429a      	cmp	r2, r3
 8003774:	d047      	beq.n	8003806 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
 800377a:	e044      	b.n	8003806 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b03      	cmp	r3, #3
 8003782:	d018      	beq.n	80037b6 <RCCEx_PLLSAI1_Config+0x86>
 8003784:	2b03      	cmp	r3, #3
 8003786:	d825      	bhi.n	80037d4 <RCCEx_PLLSAI1_Config+0xa4>
 8003788:	2b01      	cmp	r3, #1
 800378a:	d002      	beq.n	8003792 <RCCEx_PLLSAI1_Config+0x62>
 800378c:	2b02      	cmp	r3, #2
 800378e:	d009      	beq.n	80037a4 <RCCEx_PLLSAI1_Config+0x74>
 8003790:	e020      	b.n	80037d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003792:	4b60      	ldr	r3, [pc, #384]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d11d      	bne.n	80037da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a2:	e01a      	b.n	80037da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037a4:	4b5b      	ldr	r3, [pc, #364]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d116      	bne.n	80037de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b4:	e013      	b.n	80037de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037b6:	4b57      	ldr	r3, [pc, #348]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10f      	bne.n	80037e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037c2:	4b54      	ldr	r3, [pc, #336]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037d2:	e006      	b.n	80037e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      break;
 80037d8:	e004      	b.n	80037e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037da:	bf00      	nop
 80037dc:	e002      	b.n	80037e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037de:	bf00      	nop
 80037e0:	e000      	b.n	80037e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10d      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037ea:	4b4a      	ldr	r3, [pc, #296]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6819      	ldr	r1, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	430b      	orrs	r3, r1
 8003800:	4944      	ldr	r1, [pc, #272]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003802:	4313      	orrs	r3, r2
 8003804:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d17d      	bne.n	8003908 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800380c:	4b41      	ldr	r3, [pc, #260]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a40      	ldr	r2, [pc, #256]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003812:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003818:	f7fe faf8 	bl	8001e0c <HAL_GetTick>
 800381c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800381e:	e009      	b.n	8003834 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003820:	f7fe faf4 	bl	8001e0c <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d902      	bls.n	8003834 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	73fb      	strb	r3, [r7, #15]
        break;
 8003832:	e005      	b.n	8003840 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003834:	4b37      	ldr	r3, [pc, #220]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1ef      	bne.n	8003820 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d160      	bne.n	8003908 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d111      	bne.n	8003870 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800384c:	4b31      	ldr	r3, [pc, #196]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6892      	ldr	r2, [r2, #8]
 800385c:	0211      	lsls	r1, r2, #8
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	68d2      	ldr	r2, [r2, #12]
 8003862:	0912      	lsrs	r2, r2, #4
 8003864:	0452      	lsls	r2, r2, #17
 8003866:	430a      	orrs	r2, r1
 8003868:	492a      	ldr	r1, [pc, #168]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386a:	4313      	orrs	r3, r2
 800386c:	610b      	str	r3, [r1, #16]
 800386e:	e027      	b.n	80038c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d112      	bne.n	800389c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003876:	4b27      	ldr	r3, [pc, #156]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800387e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6892      	ldr	r2, [r2, #8]
 8003886:	0211      	lsls	r1, r2, #8
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6912      	ldr	r2, [r2, #16]
 800388c:	0852      	lsrs	r2, r2, #1
 800388e:	3a01      	subs	r2, #1
 8003890:	0552      	lsls	r2, r2, #21
 8003892:	430a      	orrs	r2, r1
 8003894:	491f      	ldr	r1, [pc, #124]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003896:	4313      	orrs	r3, r2
 8003898:	610b      	str	r3, [r1, #16]
 800389a:	e011      	b.n	80038c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800389c:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6892      	ldr	r2, [r2, #8]
 80038ac:	0211      	lsls	r1, r2, #8
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6952      	ldr	r2, [r2, #20]
 80038b2:	0852      	lsrs	r2, r2, #1
 80038b4:	3a01      	subs	r2, #1
 80038b6:	0652      	lsls	r2, r2, #25
 80038b8:	430a      	orrs	r2, r1
 80038ba:	4916      	ldr	r1, [pc, #88]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038c0:	4b14      	ldr	r3, [pc, #80]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a13      	ldr	r2, [pc, #76]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038cc:	f7fe fa9e 	bl	8001e0c <HAL_GetTick>
 80038d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038d2:	e009      	b.n	80038e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038d4:	f7fe fa9a 	bl	8001e0c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d902      	bls.n	80038e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	73fb      	strb	r3, [r7, #15]
          break;
 80038e6:	e005      	b.n	80038f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038e8:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ef      	beq.n	80038d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	4904      	ldr	r1, [pc, #16]	; (8003914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003904:	4313      	orrs	r3, r2
 8003906:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003908:	7bfb      	ldrb	r3, [r7, #15]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000

08003918 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003926:	4b6a      	ldr	r3, [pc, #424]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d018      	beq.n	8003964 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003932:	4b67      	ldr	r3, [pc, #412]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f003 0203 	and.w	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d10d      	bne.n	800395e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
       ||
 8003946:	2b00      	cmp	r3, #0
 8003948:	d009      	beq.n	800395e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800394a:	4b61      	ldr	r3, [pc, #388]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
       ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d047      	beq.n	80039ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
 8003962:	e044      	b.n	80039ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b03      	cmp	r3, #3
 800396a:	d018      	beq.n	800399e <RCCEx_PLLSAI2_Config+0x86>
 800396c:	2b03      	cmp	r3, #3
 800396e:	d825      	bhi.n	80039bc <RCCEx_PLLSAI2_Config+0xa4>
 8003970:	2b01      	cmp	r3, #1
 8003972:	d002      	beq.n	800397a <RCCEx_PLLSAI2_Config+0x62>
 8003974:	2b02      	cmp	r3, #2
 8003976:	d009      	beq.n	800398c <RCCEx_PLLSAI2_Config+0x74>
 8003978:	e020      	b.n	80039bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800397a:	4b55      	ldr	r3, [pc, #340]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d11d      	bne.n	80039c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800398a:	e01a      	b.n	80039c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800398c:	4b50      	ldr	r3, [pc, #320]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003994:	2b00      	cmp	r3, #0
 8003996:	d116      	bne.n	80039c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800399c:	e013      	b.n	80039c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800399e:	4b4c      	ldr	r3, [pc, #304]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10f      	bne.n	80039ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039aa:	4b49      	ldr	r3, [pc, #292]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039ba:	e006      	b.n	80039ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
      break;
 80039c0:	e004      	b.n	80039cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039c2:	bf00      	nop
 80039c4:	e002      	b.n	80039cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039c6:	bf00      	nop
 80039c8:	e000      	b.n	80039cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10d      	bne.n	80039ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039d2:	4b3f      	ldr	r3, [pc, #252]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	430b      	orrs	r3, r1
 80039e8:	4939      	ldr	r1, [pc, #228]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d167      	bne.n	8003ac4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039f4:	4b36      	ldr	r3, [pc, #216]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a35      	ldr	r2, [pc, #212]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a00:	f7fe fa04 	bl	8001e0c <HAL_GetTick>
 8003a04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a06:	e009      	b.n	8003a1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a08:	f7fe fa00 	bl	8001e0c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d902      	bls.n	8003a1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	73fb      	strb	r3, [r7, #15]
        break;
 8003a1a:	e005      	b.n	8003a28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a1c:	4b2c      	ldr	r3, [pc, #176]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1ef      	bne.n	8003a08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d14a      	bne.n	8003ac4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d111      	bne.n	8003a58 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a34:	4b26      	ldr	r3, [pc, #152]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6892      	ldr	r2, [r2, #8]
 8003a44:	0211      	lsls	r1, r2, #8
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68d2      	ldr	r2, [r2, #12]
 8003a4a:	0912      	lsrs	r2, r2, #4
 8003a4c:	0452      	lsls	r2, r2, #17
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	491f      	ldr	r1, [pc, #124]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	614b      	str	r3, [r1, #20]
 8003a56:	e011      	b.n	8003a7c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a58:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6892      	ldr	r2, [r2, #8]
 8003a68:	0211      	lsls	r1, r2, #8
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6912      	ldr	r2, [r2, #16]
 8003a6e:	0852      	lsrs	r2, r2, #1
 8003a70:	3a01      	subs	r2, #1
 8003a72:	0652      	lsls	r2, r2, #25
 8003a74:	430a      	orrs	r2, r1
 8003a76:	4916      	ldr	r1, [pc, #88]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a7c:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a88:	f7fe f9c0 	bl	8001e0c <HAL_GetTick>
 8003a8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a8e:	e009      	b.n	8003aa4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a90:	f7fe f9bc 	bl	8001e0c <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d902      	bls.n	8003aa4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	73fb      	strb	r3, [r7, #15]
          break;
 8003aa2:	e005      	b.n	8003ab0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0ef      	beq.n	8003a90 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ab6:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab8:	695a      	ldr	r2, [r3, #20]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	4904      	ldr	r1, [pc, #16]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000

08003ad4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e095      	b.n	8003c12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d108      	bne.n	8003b00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003af6:	d009      	beq.n	8003b0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	61da      	str	r2, [r3, #28]
 8003afe:	e005      	b.n	8003b0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fd ff96 	bl	8001a58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b4c:	d902      	bls.n	8003b54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	e002      	b.n	8003b5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b62:	d007      	beq.n	8003b74 <HAL_SPI_Init+0xa0>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b6c:	d002      	beq.n	8003b74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb6:	ea42 0103 	orr.w	r1, r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	0c1b      	lsrs	r3, r3, #16
 8003bd0:	f003 0204 	and.w	r2, r3, #4
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003bf0:	ea42 0103 	orr.w	r1, r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b088      	sub	sp, #32
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	4613      	mov	r3, r2
 8003c28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_SPI_Transmit+0x22>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e15f      	b.n	8003efc <HAL_SPI_Transmit+0x2e2>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c44:	f7fe f8e2 	bl	8001e0c <HAL_GetTick>
 8003c48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c4a:	88fb      	ldrh	r3, [r7, #6]
 8003c4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d002      	beq.n	8003c60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c5e:	e148      	b.n	8003ef2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_SPI_Transmit+0x52>
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d102      	bne.n	8003c72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c70:	e13f      	b.n	8003ef2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2203      	movs	r2, #3
 8003c76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	88fa      	ldrh	r2, [r7, #6]
 8003c8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	88fa      	ldrh	r2, [r7, #6]
 8003c90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cbc:	d10f      	bne.n	8003cde <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ccc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cdc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce8:	2b40      	cmp	r3, #64	; 0x40
 8003cea:	d007      	beq.n	8003cfc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d04:	d94f      	bls.n	8003da6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_SPI_Transmit+0xfa>
 8003d0e:	8afb      	ldrh	r3, [r7, #22]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d142      	bne.n	8003d9a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	881a      	ldrh	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	1c9a      	adds	r2, r3, #2
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d38:	e02f      	b.n	8003d9a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d112      	bne.n	8003d6e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	881a      	ldrh	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	1c9a      	adds	r2, r3, #2
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d6c:	e015      	b.n	8003d9a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d6e:	f7fe f84d 	bl	8001e0c <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d803      	bhi.n	8003d86 <HAL_SPI_Transmit+0x16c>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d84:	d102      	bne.n	8003d8c <HAL_SPI_Transmit+0x172>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d106      	bne.n	8003d9a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003d98:	e0ab      	b.n	8003ef2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1ca      	bne.n	8003d3a <HAL_SPI_Transmit+0x120>
 8003da4:	e080      	b.n	8003ea8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_SPI_Transmit+0x19a>
 8003dae:	8afb      	ldrh	r3, [r7, #22]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d174      	bne.n	8003e9e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d912      	bls.n	8003de4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	881a      	ldrh	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	1c9a      	adds	r2, r3, #2
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b02      	subs	r3, #2
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003de2:	e05c      	b.n	8003e9e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	330c      	adds	r3, #12
 8003dee:	7812      	ldrb	r2, [r2, #0]
 8003df0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e0a:	e048      	b.n	8003e9e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d12b      	bne.n	8003e72 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d912      	bls.n	8003e4a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	881a      	ldrh	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	1c9a      	adds	r2, r3, #2
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b02      	subs	r3, #2
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e48:	e029      	b.n	8003e9e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	330c      	adds	r3, #12
 8003e54:	7812      	ldrb	r2, [r2, #0]
 8003e56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e70:	e015      	b.n	8003e9e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e72:	f7fd ffcb 	bl	8001e0c <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d803      	bhi.n	8003e8a <HAL_SPI_Transmit+0x270>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e88:	d102      	bne.n	8003e90 <HAL_SPI_Transmit+0x276>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d106      	bne.n	8003e9e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003e9c:	e029      	b.n	8003ef2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1b1      	bne.n	8003e0c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	6839      	ldr	r1, [r7, #0]
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 fb2b 	bl	8004508 <SPI_EndRxTxTransaction>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10a      	bne.n	8003edc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	77fb      	strb	r3, [r7, #31]
 8003ee8:	e003      	b.n	8003ef2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003efa:	7ffb      	ldrb	r3, [r7, #31]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3720      	adds	r7, #32
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_SPI_Transmit_IT+0x1e>
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d102      	bne.n	8003f28 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f26:	e06d      	b.n	8004004 <HAL_SPI_Transmit_IT+0x100>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d002      	beq.n	8003f3a <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 8003f34:	2302      	movs	r3, #2
 8003f36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f38:	e064      	b.n	8004004 <HAL_SPI_Transmit_IT+0x100>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_SPI_Transmit_IT+0x44>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e05e      	b.n	8004006 <HAL_SPI_Transmit_IT+0x102>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2203      	movs	r2, #3
 8003f54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	88fa      	ldrh	r2, [r7, #6]
 8003f68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	88fa      	ldrh	r2, [r7, #6]
 8003f6e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f94:	d903      	bls.n	8003f9e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4a1e      	ldr	r2, [pc, #120]	; (8004014 <HAL_SPI_Transmit_IT+0x110>)
 8003f9a:	651a      	str	r2, [r3, #80]	; 0x50
 8003f9c:	e002      	b.n	8003fa4 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4a1d      	ldr	r2, [pc, #116]	; (8004018 <HAL_SPI_Transmit_IT+0x114>)
 8003fa2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fac:	d10f      	bne.n	8003fce <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fcc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd8:	2b40      	cmp	r3, #64	; 0x40
 8003fda:	d007      	beq.n	8003fec <HAL_SPI_Transmit_IT+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fea:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004002:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8004004:	7dfb      	ldrb	r3, [r7, #23]
}
 8004006:	4618      	mov	r0, r3
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	08004289 	.word	0x08004289
 8004018:	08004243 	.word	0x08004243

0800401c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10e      	bne.n	800405c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004044:	2b00      	cmp	r3, #0
 8004046:	d009      	beq.n	800405c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404e:	2b00      	cmp	r3, #0
 8004050:	d004      	beq.n	800405c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	4798      	blx	r3
    return;
 800405a:	e0ce      	b.n	80041fa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <HAL_SPI_IRQHandler+0x5e>
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406c:	2b00      	cmp	r3, #0
 800406e:	d004      	beq.n	800407a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	4798      	blx	r3
    return;
 8004078:	e0bf      	b.n	80041fa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <HAL_SPI_IRQHandler+0x7e>
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d105      	bne.n	800409a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80b0 	beq.w	80041fa <HAL_SPI_IRQHandler+0x1de>
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 80aa 	beq.w	80041fa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d023      	beq.n	80040f8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d011      	beq.n	80040e0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c0:	f043 0204 	orr.w	r2, r3, #4
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040c8:	2300      	movs	r3, #0
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	e00b      	b.n	80040f8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040e0:	2300      	movs	r3, #0
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	693b      	ldr	r3, [r7, #16]
        return;
 80040f6:	e080      	b.n	80041fa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d014      	beq.n	800412c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004106:	f043 0201 	orr.w	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00c      	beq.n	8004150 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800413a:	f043 0208 	orr.w	r2, r3, #8
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004142:	2300      	movs	r3, #0
 8004144:	60bb      	str	r3, [r7, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004154:	2b00      	cmp	r3, #0
 8004156:	d04f      	beq.n	80041f8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004166:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d104      	bne.n	8004184 <HAL_SPI_IRQHandler+0x168>
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d034      	beq.n	80041ee <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0203 	bic.w	r2, r2, #3
 8004192:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004198:	2b00      	cmp	r3, #0
 800419a:	d011      	beq.n	80041c0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	4a17      	ldr	r2, [pc, #92]	; (8004200 <HAL_SPI_IRQHandler+0x1e4>)
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fd ff70 	bl	800208e <HAL_DMA_Abort_IT>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d016      	beq.n	80041f6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	4a0c      	ldr	r2, [pc, #48]	; (8004200 <HAL_SPI_IRQHandler+0x1e4>)
 80041ce:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fd ff5a 	bl	800208e <HAL_DMA_Abort_IT>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80041ec:	e003      	b.n	80041f6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f808 	bl	8004204 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80041f4:	e000      	b.n	80041f8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80041f6:	bf00      	nop
    return;
 80041f8:	bf00      	nop
  }
}
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	08004219 	.word	0x08004219

08004204 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f7ff ffe5 	bl	8004204 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800423a:	bf00      	nop
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b082      	sub	sp, #8
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	7812      	ldrb	r2, [r2, #0]
 8004256:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d102      	bne.n	8004280 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f98a 	bl	8004594 <SPI_CloseTx_ISR>
  }
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	881a      	ldrh	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	1c9a      	adds	r2, r3, #2
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d102      	bne.n	80042c4 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f968 	bl	8004594 <SPI_CloseTx_ISR>
  }
}
 80042c4:	bf00      	nop
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	4613      	mov	r3, r2
 80042da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042dc:	f7fd fd96 	bl	8001e0c <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	4413      	add	r3, r2
 80042ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042ec:	f7fd fd8e 	bl	8001e0c <HAL_GetTick>
 80042f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042f2:	4b39      	ldr	r3, [pc, #228]	; (80043d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	015b      	lsls	r3, r3, #5
 80042f8:	0d1b      	lsrs	r3, r3, #20
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	fb02 f303 	mul.w	r3, r2, r3
 8004300:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004302:	e054      	b.n	80043ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430a:	d050      	beq.n	80043ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800430c:	f7fd fd7e 	bl	8001e0c <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	69fa      	ldr	r2, [r7, #28]
 8004318:	429a      	cmp	r2, r3
 800431a:	d902      	bls.n	8004322 <SPI_WaitFlagStateUntilTimeout+0x56>
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d13d      	bne.n	800439e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004330:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800433a:	d111      	bne.n	8004360 <SPI_WaitFlagStateUntilTimeout+0x94>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004344:	d004      	beq.n	8004350 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434e:	d107      	bne.n	8004360 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800435e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004368:	d10f      	bne.n	800438a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004388:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e017      	b.n	80043ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4013      	ands	r3, r2
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	bf0c      	ite	eq
 80043be:	2301      	moveq	r3, #1
 80043c0:	2300      	movne	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d19b      	bne.n	8004304 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3720      	adds	r7, #32
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20000004 	.word	0x20000004

080043dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08a      	sub	sp, #40	; 0x28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80043ea:	2300      	movs	r3, #0
 80043ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043ee:	f7fd fd0d 	bl	8001e0c <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	4413      	add	r3, r2
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80043fe:	f7fd fd05 	bl	8001e0c <HAL_GetTick>
 8004402:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	330c      	adds	r3, #12
 800440a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800440c:	4b3d      	ldr	r3, [pc, #244]	; (8004504 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	00da      	lsls	r2, r3, #3
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	0d1b      	lsrs	r3, r3, #20
 800441c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441e:	fb02 f303 	mul.w	r3, r2, r3
 8004422:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004424:	e060      	b.n	80044e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800442c:	d107      	bne.n	800443e <SPI_WaitFifoStateUntilTimeout+0x62>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d104      	bne.n	800443e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800443c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d050      	beq.n	80044e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004446:	f7fd fce1 	bl	8001e0c <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004452:	429a      	cmp	r2, r3
 8004454:	d902      	bls.n	800445c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	2b00      	cmp	r3, #0
 800445a:	d13d      	bne.n	80044d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800446a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004474:	d111      	bne.n	800449a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800447e:	d004      	beq.n	800448a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004488:	d107      	bne.n	800449a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004498:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a2:	d10f      	bne.n	80044c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e010      	b.n	80044fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	3b01      	subs	r3, #1
 80044e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4013      	ands	r3, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d196      	bne.n	8004426 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3728      	adds	r7, #40	; 0x28
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000004 	.word	0x20000004

08004508 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2200      	movs	r2, #0
 800451c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7ff ff5b 	bl	80043dc <SPI_WaitFifoStateUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d007      	beq.n	800453c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004530:	f043 0220 	orr.w	r2, r3, #32
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e027      	b.n	800458c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2200      	movs	r2, #0
 8004544:	2180      	movs	r1, #128	; 0x80
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f7ff fec0 	bl	80042cc <SPI_WaitFlagStateUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004556:	f043 0220 	orr.w	r2, r3, #32
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e014      	b.n	800458c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2200      	movs	r2, #0
 800456a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f7ff ff34 	bl	80043dc <SPI_WaitFifoStateUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e000      	b.n	800458c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800459c:	f7fd fc36 	bl	8001e0c <HAL_GetTick>
 80045a0:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045b0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	2164      	movs	r1, #100	; 0x64
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff ffa6 	bl	8004508 <SPI_EndRxTxTransaction>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c6:	f043 0220 	orr.w	r2, r3, #32
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10a      	bne.n	80045ec <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff fe01 	bl	8004204 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004602:	e002      	b.n	800460a <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7fc f947 	bl	8000898 <HAL_SPI_TxCpltCallback>
}
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e040      	b.n	80046a6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004628:	2b00      	cmp	r3, #0
 800462a:	d106      	bne.n	800463a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7fd faf3 	bl	8001c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2224      	movs	r2, #36	; 0x24
 800463e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0201 	bic.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fae1 	bl	8004c20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f826 	bl	80046b0 <UART_SetConfig>
 8004664:	4603      	mov	r3, r0
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e01b      	b.n	80046a6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800467c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800468c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0201 	orr.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fb60 	bl	8004d64 <UART_CheckIdleState>
 80046a4:	4603      	mov	r3, r0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046b4:	b08a      	sub	sp, #40	; 0x28
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	431a      	orrs	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	4ba4      	ldr	r3, [pc, #656]	; (8004970 <UART_SetConfig+0x2c0>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046e8:	430b      	orrs	r3, r1
 80046ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a99      	ldr	r2, [pc, #612]	; (8004974 <UART_SetConfig+0x2c4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004718:	4313      	orrs	r3, r2
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472c:	430a      	orrs	r2, r1
 800472e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a90      	ldr	r2, [pc, #576]	; (8004978 <UART_SetConfig+0x2c8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d126      	bne.n	8004788 <UART_SetConfig+0xd8>
 800473a:	4b90      	ldr	r3, [pc, #576]	; (800497c <UART_SetConfig+0x2cc>)
 800473c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	2b03      	cmp	r3, #3
 8004746:	d81b      	bhi.n	8004780 <UART_SetConfig+0xd0>
 8004748:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <UART_SetConfig+0xa0>)
 800474a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474e:	bf00      	nop
 8004750:	08004761 	.word	0x08004761
 8004754:	08004771 	.word	0x08004771
 8004758:	08004769 	.word	0x08004769
 800475c:	08004779 	.word	0x08004779
 8004760:	2301      	movs	r3, #1
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004766:	e116      	b.n	8004996 <UART_SetConfig+0x2e6>
 8004768:	2302      	movs	r3, #2
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800476e:	e112      	b.n	8004996 <UART_SetConfig+0x2e6>
 8004770:	2304      	movs	r3, #4
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004776:	e10e      	b.n	8004996 <UART_SetConfig+0x2e6>
 8004778:	2308      	movs	r3, #8
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477e:	e10a      	b.n	8004996 <UART_SetConfig+0x2e6>
 8004780:	2310      	movs	r3, #16
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004786:	e106      	b.n	8004996 <UART_SetConfig+0x2e6>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a7c      	ldr	r2, [pc, #496]	; (8004980 <UART_SetConfig+0x2d0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d138      	bne.n	8004804 <UART_SetConfig+0x154>
 8004792:	4b7a      	ldr	r3, [pc, #488]	; (800497c <UART_SetConfig+0x2cc>)
 8004794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004798:	f003 030c 	and.w	r3, r3, #12
 800479c:	2b0c      	cmp	r3, #12
 800479e:	d82d      	bhi.n	80047fc <UART_SetConfig+0x14c>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <UART_SetConfig+0xf8>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	080047dd 	.word	0x080047dd
 80047ac:	080047fd 	.word	0x080047fd
 80047b0:	080047fd 	.word	0x080047fd
 80047b4:	080047fd 	.word	0x080047fd
 80047b8:	080047ed 	.word	0x080047ed
 80047bc:	080047fd 	.word	0x080047fd
 80047c0:	080047fd 	.word	0x080047fd
 80047c4:	080047fd 	.word	0x080047fd
 80047c8:	080047e5 	.word	0x080047e5
 80047cc:	080047fd 	.word	0x080047fd
 80047d0:	080047fd 	.word	0x080047fd
 80047d4:	080047fd 	.word	0x080047fd
 80047d8:	080047f5 	.word	0x080047f5
 80047dc:	2300      	movs	r3, #0
 80047de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e2:	e0d8      	b.n	8004996 <UART_SetConfig+0x2e6>
 80047e4:	2302      	movs	r3, #2
 80047e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ea:	e0d4      	b.n	8004996 <UART_SetConfig+0x2e6>
 80047ec:	2304      	movs	r3, #4
 80047ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f2:	e0d0      	b.n	8004996 <UART_SetConfig+0x2e6>
 80047f4:	2308      	movs	r3, #8
 80047f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fa:	e0cc      	b.n	8004996 <UART_SetConfig+0x2e6>
 80047fc:	2310      	movs	r3, #16
 80047fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004802:	e0c8      	b.n	8004996 <UART_SetConfig+0x2e6>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a5e      	ldr	r2, [pc, #376]	; (8004984 <UART_SetConfig+0x2d4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d125      	bne.n	800485a <UART_SetConfig+0x1aa>
 800480e:	4b5b      	ldr	r3, [pc, #364]	; (800497c <UART_SetConfig+0x2cc>)
 8004810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004814:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004818:	2b30      	cmp	r3, #48	; 0x30
 800481a:	d016      	beq.n	800484a <UART_SetConfig+0x19a>
 800481c:	2b30      	cmp	r3, #48	; 0x30
 800481e:	d818      	bhi.n	8004852 <UART_SetConfig+0x1a2>
 8004820:	2b20      	cmp	r3, #32
 8004822:	d00a      	beq.n	800483a <UART_SetConfig+0x18a>
 8004824:	2b20      	cmp	r3, #32
 8004826:	d814      	bhi.n	8004852 <UART_SetConfig+0x1a2>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <UART_SetConfig+0x182>
 800482c:	2b10      	cmp	r3, #16
 800482e:	d008      	beq.n	8004842 <UART_SetConfig+0x192>
 8004830:	e00f      	b.n	8004852 <UART_SetConfig+0x1a2>
 8004832:	2300      	movs	r3, #0
 8004834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004838:	e0ad      	b.n	8004996 <UART_SetConfig+0x2e6>
 800483a:	2302      	movs	r3, #2
 800483c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004840:	e0a9      	b.n	8004996 <UART_SetConfig+0x2e6>
 8004842:	2304      	movs	r3, #4
 8004844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004848:	e0a5      	b.n	8004996 <UART_SetConfig+0x2e6>
 800484a:	2308      	movs	r3, #8
 800484c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004850:	e0a1      	b.n	8004996 <UART_SetConfig+0x2e6>
 8004852:	2310      	movs	r3, #16
 8004854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004858:	e09d      	b.n	8004996 <UART_SetConfig+0x2e6>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a4a      	ldr	r2, [pc, #296]	; (8004988 <UART_SetConfig+0x2d8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d125      	bne.n	80048b0 <UART_SetConfig+0x200>
 8004864:	4b45      	ldr	r3, [pc, #276]	; (800497c <UART_SetConfig+0x2cc>)
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800486e:	2bc0      	cmp	r3, #192	; 0xc0
 8004870:	d016      	beq.n	80048a0 <UART_SetConfig+0x1f0>
 8004872:	2bc0      	cmp	r3, #192	; 0xc0
 8004874:	d818      	bhi.n	80048a8 <UART_SetConfig+0x1f8>
 8004876:	2b80      	cmp	r3, #128	; 0x80
 8004878:	d00a      	beq.n	8004890 <UART_SetConfig+0x1e0>
 800487a:	2b80      	cmp	r3, #128	; 0x80
 800487c:	d814      	bhi.n	80048a8 <UART_SetConfig+0x1f8>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <UART_SetConfig+0x1d8>
 8004882:	2b40      	cmp	r3, #64	; 0x40
 8004884:	d008      	beq.n	8004898 <UART_SetConfig+0x1e8>
 8004886:	e00f      	b.n	80048a8 <UART_SetConfig+0x1f8>
 8004888:	2300      	movs	r3, #0
 800488a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488e:	e082      	b.n	8004996 <UART_SetConfig+0x2e6>
 8004890:	2302      	movs	r3, #2
 8004892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004896:	e07e      	b.n	8004996 <UART_SetConfig+0x2e6>
 8004898:	2304      	movs	r3, #4
 800489a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489e:	e07a      	b.n	8004996 <UART_SetConfig+0x2e6>
 80048a0:	2308      	movs	r3, #8
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a6:	e076      	b.n	8004996 <UART_SetConfig+0x2e6>
 80048a8:	2310      	movs	r3, #16
 80048aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ae:	e072      	b.n	8004996 <UART_SetConfig+0x2e6>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a35      	ldr	r2, [pc, #212]	; (800498c <UART_SetConfig+0x2dc>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d12a      	bne.n	8004910 <UART_SetConfig+0x260>
 80048ba:	4b30      	ldr	r3, [pc, #192]	; (800497c <UART_SetConfig+0x2cc>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048c8:	d01a      	beq.n	8004900 <UART_SetConfig+0x250>
 80048ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ce:	d81b      	bhi.n	8004908 <UART_SetConfig+0x258>
 80048d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d4:	d00c      	beq.n	80048f0 <UART_SetConfig+0x240>
 80048d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048da:	d815      	bhi.n	8004908 <UART_SetConfig+0x258>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <UART_SetConfig+0x238>
 80048e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e4:	d008      	beq.n	80048f8 <UART_SetConfig+0x248>
 80048e6:	e00f      	b.n	8004908 <UART_SetConfig+0x258>
 80048e8:	2300      	movs	r3, #0
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ee:	e052      	b.n	8004996 <UART_SetConfig+0x2e6>
 80048f0:	2302      	movs	r3, #2
 80048f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f6:	e04e      	b.n	8004996 <UART_SetConfig+0x2e6>
 80048f8:	2304      	movs	r3, #4
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fe:	e04a      	b.n	8004996 <UART_SetConfig+0x2e6>
 8004900:	2308      	movs	r3, #8
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004906:	e046      	b.n	8004996 <UART_SetConfig+0x2e6>
 8004908:	2310      	movs	r3, #16
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490e:	e042      	b.n	8004996 <UART_SetConfig+0x2e6>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a17      	ldr	r2, [pc, #92]	; (8004974 <UART_SetConfig+0x2c4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d13a      	bne.n	8004990 <UART_SetConfig+0x2e0>
 800491a:	4b18      	ldr	r3, [pc, #96]	; (800497c <UART_SetConfig+0x2cc>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004920:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004924:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004928:	d01a      	beq.n	8004960 <UART_SetConfig+0x2b0>
 800492a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800492e:	d81b      	bhi.n	8004968 <UART_SetConfig+0x2b8>
 8004930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004934:	d00c      	beq.n	8004950 <UART_SetConfig+0x2a0>
 8004936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800493a:	d815      	bhi.n	8004968 <UART_SetConfig+0x2b8>
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <UART_SetConfig+0x298>
 8004940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004944:	d008      	beq.n	8004958 <UART_SetConfig+0x2a8>
 8004946:	e00f      	b.n	8004968 <UART_SetConfig+0x2b8>
 8004948:	2300      	movs	r3, #0
 800494a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800494e:	e022      	b.n	8004996 <UART_SetConfig+0x2e6>
 8004950:	2302      	movs	r3, #2
 8004952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004956:	e01e      	b.n	8004996 <UART_SetConfig+0x2e6>
 8004958:	2304      	movs	r3, #4
 800495a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800495e:	e01a      	b.n	8004996 <UART_SetConfig+0x2e6>
 8004960:	2308      	movs	r3, #8
 8004962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004966:	e016      	b.n	8004996 <UART_SetConfig+0x2e6>
 8004968:	2310      	movs	r3, #16
 800496a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496e:	e012      	b.n	8004996 <UART_SetConfig+0x2e6>
 8004970:	efff69f3 	.word	0xefff69f3
 8004974:	40008000 	.word	0x40008000
 8004978:	40013800 	.word	0x40013800
 800497c:	40021000 	.word	0x40021000
 8004980:	40004400 	.word	0x40004400
 8004984:	40004800 	.word	0x40004800
 8004988:	40004c00 	.word	0x40004c00
 800498c:	40005000 	.word	0x40005000
 8004990:	2310      	movs	r3, #16
 8004992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a9f      	ldr	r2, [pc, #636]	; (8004c18 <UART_SetConfig+0x568>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d17a      	bne.n	8004a96 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d824      	bhi.n	80049f2 <UART_SetConfig+0x342>
 80049a8:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <UART_SetConfig+0x300>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	080049d5 	.word	0x080049d5
 80049b4:	080049f3 	.word	0x080049f3
 80049b8:	080049dd 	.word	0x080049dd
 80049bc:	080049f3 	.word	0x080049f3
 80049c0:	080049e3 	.word	0x080049e3
 80049c4:	080049f3 	.word	0x080049f3
 80049c8:	080049f3 	.word	0x080049f3
 80049cc:	080049f3 	.word	0x080049f3
 80049d0:	080049eb 	.word	0x080049eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d4:	f7fe fb36 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 80049d8:	61f8      	str	r0, [r7, #28]
        break;
 80049da:	e010      	b.n	80049fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049dc:	4b8f      	ldr	r3, [pc, #572]	; (8004c1c <UART_SetConfig+0x56c>)
 80049de:	61fb      	str	r3, [r7, #28]
        break;
 80049e0:	e00d      	b.n	80049fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049e2:	f7fe fa97 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 80049e6:	61f8      	str	r0, [r7, #28]
        break;
 80049e8:	e009      	b.n	80049fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ee:	61fb      	str	r3, [r7, #28]
        break;
 80049f0:	e005      	b.n	80049fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 80fb 	beq.w	8004bfc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	4413      	add	r3, r2
 8004a10:	69fa      	ldr	r2, [r7, #28]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d305      	bcc.n	8004a22 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d903      	bls.n	8004a2a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a28:	e0e8      	b.n	8004bfc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	461c      	mov	r4, r3
 8004a30:	4615      	mov	r5, r2
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	022b      	lsls	r3, r5, #8
 8004a3c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a40:	0222      	lsls	r2, r4, #8
 8004a42:	68f9      	ldr	r1, [r7, #12]
 8004a44:	6849      	ldr	r1, [r1, #4]
 8004a46:	0849      	lsrs	r1, r1, #1
 8004a48:	2000      	movs	r0, #0
 8004a4a:	4688      	mov	r8, r1
 8004a4c:	4681      	mov	r9, r0
 8004a4e:	eb12 0a08 	adds.w	sl, r2, r8
 8004a52:	eb43 0b09 	adc.w	fp, r3, r9
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	603b      	str	r3, [r7, #0]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a64:	4650      	mov	r0, sl
 8004a66:	4659      	mov	r1, fp
 8004a68:	f7fb fbae 	bl	80001c8 <__aeabi_uldivmod>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4613      	mov	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a7a:	d308      	bcc.n	8004a8e <UART_SetConfig+0x3de>
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a82:	d204      	bcs.n	8004a8e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	60da      	str	r2, [r3, #12]
 8004a8c:	e0b6      	b.n	8004bfc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a94:	e0b2      	b.n	8004bfc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a9e:	d15e      	bne.n	8004b5e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004aa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d828      	bhi.n	8004afa <UART_SetConfig+0x44a>
 8004aa8:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <UART_SetConfig+0x400>)
 8004aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aae:	bf00      	nop
 8004ab0:	08004ad5 	.word	0x08004ad5
 8004ab4:	08004add 	.word	0x08004add
 8004ab8:	08004ae5 	.word	0x08004ae5
 8004abc:	08004afb 	.word	0x08004afb
 8004ac0:	08004aeb 	.word	0x08004aeb
 8004ac4:	08004afb 	.word	0x08004afb
 8004ac8:	08004afb 	.word	0x08004afb
 8004acc:	08004afb 	.word	0x08004afb
 8004ad0:	08004af3 	.word	0x08004af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ad4:	f7fe fab6 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 8004ad8:	61f8      	str	r0, [r7, #28]
        break;
 8004ada:	e014      	b.n	8004b06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004adc:	f7fe fac8 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 8004ae0:	61f8      	str	r0, [r7, #28]
        break;
 8004ae2:	e010      	b.n	8004b06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae4:	4b4d      	ldr	r3, [pc, #308]	; (8004c1c <UART_SetConfig+0x56c>)
 8004ae6:	61fb      	str	r3, [r7, #28]
        break;
 8004ae8:	e00d      	b.n	8004b06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aea:	f7fe fa13 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 8004aee:	61f8      	str	r0, [r7, #28]
        break;
 8004af0:	e009      	b.n	8004b06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004af6:	61fb      	str	r3, [r7, #28]
        break;
 8004af8:	e005      	b.n	8004b06 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d077      	beq.n	8004bfc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	005a      	lsls	r2, r3, #1
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	085b      	lsrs	r3, r3, #1
 8004b16:	441a      	add	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b0f      	cmp	r3, #15
 8004b26:	d916      	bls.n	8004b56 <UART_SetConfig+0x4a6>
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b2e:	d212      	bcs.n	8004b56 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f023 030f 	bic.w	r3, r3, #15
 8004b38:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	085b      	lsrs	r3, r3, #1
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	8afb      	ldrh	r3, [r7, #22]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	8afa      	ldrh	r2, [r7, #22]
 8004b52:	60da      	str	r2, [r3, #12]
 8004b54:	e052      	b.n	8004bfc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b5c:	e04e      	b.n	8004bfc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d827      	bhi.n	8004bb6 <UART_SetConfig+0x506>
 8004b66:	a201      	add	r2, pc, #4	; (adr r2, 8004b6c <UART_SetConfig+0x4bc>)
 8004b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6c:	08004b91 	.word	0x08004b91
 8004b70:	08004b99 	.word	0x08004b99
 8004b74:	08004ba1 	.word	0x08004ba1
 8004b78:	08004bb7 	.word	0x08004bb7
 8004b7c:	08004ba7 	.word	0x08004ba7
 8004b80:	08004bb7 	.word	0x08004bb7
 8004b84:	08004bb7 	.word	0x08004bb7
 8004b88:	08004bb7 	.word	0x08004bb7
 8004b8c:	08004baf 	.word	0x08004baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b90:	f7fe fa58 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 8004b94:	61f8      	str	r0, [r7, #28]
        break;
 8004b96:	e014      	b.n	8004bc2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b98:	f7fe fa6a 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 8004b9c:	61f8      	str	r0, [r7, #28]
        break;
 8004b9e:	e010      	b.n	8004bc2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ba0:	4b1e      	ldr	r3, [pc, #120]	; (8004c1c <UART_SetConfig+0x56c>)
 8004ba2:	61fb      	str	r3, [r7, #28]
        break;
 8004ba4:	e00d      	b.n	8004bc2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ba6:	f7fe f9b5 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 8004baa:	61f8      	str	r0, [r7, #28]
        break;
 8004bac:	e009      	b.n	8004bc2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bb2:	61fb      	str	r3, [r7, #28]
        break;
 8004bb4:	e005      	b.n	8004bc2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004bc0:	bf00      	nop
    }

    if (pclk != 0U)
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d019      	beq.n	8004bfc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	085a      	lsrs	r2, r3, #1
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	441a      	add	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bda:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	2b0f      	cmp	r3, #15
 8004be0:	d909      	bls.n	8004bf6 <UART_SetConfig+0x546>
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be8:	d205      	bcs.n	8004bf6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	60da      	str	r2, [r3, #12]
 8004bf4:	e002      	b.n	8004bfc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3728      	adds	r7, #40	; 0x28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c16:	bf00      	nop
 8004c18:	40008000 	.word	0x40008000
 8004c1c:	00f42400 	.word	0x00f42400

08004c20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	f003 0304 	and.w	r3, r3, #4
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01a      	beq.n	8004d36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d1e:	d10a      	bne.n	8004d36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	605a      	str	r2, [r3, #4]
  }
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b098      	sub	sp, #96	; 0x60
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d74:	f7fd f84a 	bl	8001e0c <HAL_GetTick>
 8004d78:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0308 	and.w	r3, r3, #8
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d12e      	bne.n	8004de6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d90:	2200      	movs	r2, #0
 8004d92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f88c 	bl	8004eb4 <UART_WaitOnFlagUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d021      	beq.n	8004de6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004daa:	e853 3f00 	ldrex	r3, [r3]
 8004dae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004db6:	653b      	str	r3, [r7, #80]	; 0x50
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8004dc2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e6      	bne.n	8004da2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e062      	b.n	8004eac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d149      	bne.n	8004e88 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004df4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f856 	bl	8004eb4 <UART_WaitOnFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d03c      	beq.n	8004e88 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	e853 3f00 	ldrex	r3, [r3]
 8004e1a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e34:	e841 2300 	strex	r3, r2, [r1]
 8004e38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e6      	bne.n	8004e0e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3308      	adds	r3, #8
 8004e46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	e853 3f00 	ldrex	r3, [r3]
 8004e4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0301 	bic.w	r3, r3, #1
 8004e56:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e60:	61fa      	str	r2, [r7, #28]
 8004e62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e64:	69b9      	ldr	r1, [r7, #24]
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	e841 2300 	strex	r3, r2, [r1]
 8004e6c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e5      	bne.n	8004e40 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e011      	b.n	8004eac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3758      	adds	r7, #88	; 0x58
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ec4:	e049      	b.n	8004f5a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ecc:	d045      	beq.n	8004f5a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ece:	f7fc ff9d 	bl	8001e0c <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d302      	bcc.n	8004ee4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e048      	b.n	8004f7a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d031      	beq.n	8004f5a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d110      	bne.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2208      	movs	r2, #8
 8004f0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f838 	bl	8004f82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2208      	movs	r2, #8
 8004f16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e029      	b.n	8004f7a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f34:	d111      	bne.n	8004f5a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 f81e 	bl	8004f82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e00f      	b.n	8004f7a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69da      	ldr	r2, [r3, #28]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4013      	ands	r3, r2
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	bf0c      	ite	eq
 8004f6a:	2301      	moveq	r3, #1
 8004f6c:	2300      	movne	r3, #0
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	79fb      	ldrb	r3, [r7, #7]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d0a6      	beq.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b095      	sub	sp, #84	; 0x54
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa8:	643b      	str	r3, [r7, #64]	; 0x40
 8004faa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e6      	bne.n	8004f8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	e853 3f00 	ldrex	r3, [r3]
 8004fca:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f023 0301 	bic.w	r3, r3, #1
 8004fd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3308      	adds	r3, #8
 8004fda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fe4:	e841 2300 	strex	r3, r2, [r1]
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e5      	bne.n	8004fbc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d118      	bne.n	800502a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	60bb      	str	r3, [r7, #8]
   return(result);
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f023 0310 	bic.w	r3, r3, #16
 800500c:	647b      	str	r3, [r7, #68]	; 0x44
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005016:	61bb      	str	r3, [r7, #24]
 8005018:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501a:	6979      	ldr	r1, [r7, #20]
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	e841 2300 	strex	r3, r2, [r1]
 8005022:	613b      	str	r3, [r7, #16]
   return(result);
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1e6      	bne.n	8004ff8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2220      	movs	r2, #32
 800502e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800503e:	bf00      	nop
 8005040:	3754      	adds	r7, #84	; 0x54
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <memset>:
 800504a:	4402      	add	r2, r0
 800504c:	4603      	mov	r3, r0
 800504e:	4293      	cmp	r3, r2
 8005050:	d100      	bne.n	8005054 <memset+0xa>
 8005052:	4770      	bx	lr
 8005054:	f803 1b01 	strb.w	r1, [r3], #1
 8005058:	e7f9      	b.n	800504e <memset+0x4>
	...

0800505c <__libc_init_array>:
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	4d0d      	ldr	r5, [pc, #52]	; (8005094 <__libc_init_array+0x38>)
 8005060:	4c0d      	ldr	r4, [pc, #52]	; (8005098 <__libc_init_array+0x3c>)
 8005062:	1b64      	subs	r4, r4, r5
 8005064:	10a4      	asrs	r4, r4, #2
 8005066:	2600      	movs	r6, #0
 8005068:	42a6      	cmp	r6, r4
 800506a:	d109      	bne.n	8005080 <__libc_init_array+0x24>
 800506c:	4d0b      	ldr	r5, [pc, #44]	; (800509c <__libc_init_array+0x40>)
 800506e:	4c0c      	ldr	r4, [pc, #48]	; (80050a0 <__libc_init_array+0x44>)
 8005070:	f000 f818 	bl	80050a4 <_init>
 8005074:	1b64      	subs	r4, r4, r5
 8005076:	10a4      	asrs	r4, r4, #2
 8005078:	2600      	movs	r6, #0
 800507a:	42a6      	cmp	r6, r4
 800507c:	d105      	bne.n	800508a <__libc_init_array+0x2e>
 800507e:	bd70      	pop	{r4, r5, r6, pc}
 8005080:	f855 3b04 	ldr.w	r3, [r5], #4
 8005084:	4798      	blx	r3
 8005086:	3601      	adds	r6, #1
 8005088:	e7ee      	b.n	8005068 <__libc_init_array+0xc>
 800508a:	f855 3b04 	ldr.w	r3, [r5], #4
 800508e:	4798      	blx	r3
 8005090:	3601      	adds	r6, #1
 8005092:	e7f2      	b.n	800507a <__libc_init_array+0x1e>
 8005094:	0800510c 	.word	0x0800510c
 8005098:	0800510c 	.word	0x0800510c
 800509c:	0800510c 	.word	0x0800510c
 80050a0:	08005110 	.word	0x08005110

080050a4 <_init>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	bf00      	nop
 80050a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050aa:	bc08      	pop	{r3}
 80050ac:	469e      	mov	lr, r3
 80050ae:	4770      	bx	lr

080050b0 <_fini>:
 80050b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b2:	bf00      	nop
 80050b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b6:	bc08      	pop	{r3}
 80050b8:	469e      	mov	lr, r3
 80050ba:	4770      	bx	lr
